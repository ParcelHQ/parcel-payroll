{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.9\"},\"sources\":{\"contracts/Organizer.sol\":{\"content\":\"//contracts/Organizer.sol\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./payroll/ApproverManager.sol\\\";\\n// import \\\"./organizer/ApprovalMatrix.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n// import \\\"./organizer/PayoutManager.sol\\\";\\nimport \\\"./payroll/PayrollManager.sol\\\";\\n\\n/// @title Organizer - A utility smart contract for Orgss to define and manage their Organizational structure.\\n/// @author Sriram Kasyap Meduri - <sriram@parcel.money>\\n/// @author Krishna Kant Sharma - <krishna@parcel.money>\\n\\ncontract Organizer is ApproverManager, Pausable, PayrollManager {\\n    //  Events\\n    //  Org Onboarded\\n    event OrgOnboarded(\\n        address indexed orgAddress,\\n        address[] indexed approvers,\\n        address[] approvers2\\n    );\\n\\n    \\n    //  Org Offboarded\\n    event OrgOffboarded(address indexed orgAddress);\\n\\n    \\n    /**\\n        * @dev Constructor\\n        * @param _allowanceAddress - Address of the Allowance Module on current Network\\n        * @param _masterOperator - Address of the Master Operator\\n     */\\n    constructor(address _allowanceAddress, address _masterOperator) {\\n        ALLOWANCE_MODULE = _allowanceAddress;\\n        MASTER_OPERATOR = _masterOperator;\\n        \\n        // Initialize approvedRoots with sentinel\\n        approvedRoots[SENTINEL_BYTES] = NULL_BYTES;\\n    }\\n\\n    \\n    /**\\n        * @dev Onboard an Org with approvers \\n        * @param _approvers - Array of approver addresses\\n        * @param approvalsRequired - Number of approvals required for a payout to be executed\\n     */\\n    function onboard(\\n        address[] calldata _approvers,\\n        uint256 approvalsRequired\\n    ) external onlyMultisig(msg.sender) {\\n        address safeAddress = msg.sender;\\n\\n        require(_approvers.length > 0, \\\"CS000\\\");\\n\\n        require(_approvers.length >= approvalsRequired, \\\"CS000\\\");\\n\\n        address currentapprover = SENTINEL_ADDRESS;\\n\\n        orgs[safeAddress].approverCount = 0;\\n        orgs[safeAddress].approvalsRequired = approvalsRequired;\\n\\n        for (uint256 i = 0; i < _approvers.length; i++) {\\n            address approver = _approvers[i];\\n            require(\\n                // approver address cannot be null.\\n                approver != address(0) &&\\n                    // approver address cannot be SENTINEL.\\n                    approver != SENTINEL_ADDRESS &&\\n                    // approver address cannot be same as contract.\\n                    approver != address(this) &&\\n                    // approver address cannot be same as previous.\\n                    currentapprover != approver,\\n                \\\"CS001\\\"\\n            );\\n            // No duplicate approvers allowed.\\n            require(\\n                orgs[safeAddress].approvers[approver] == address(0),\\n                \\\"CS002\\\"\\n            );\\n            orgs[safeAddress].approvers[currentapprover] = approver;\\n            currentapprover = approver;\\n\\n            // TODO: emit Approver added event\\n            orgs[safeAddress].approverCount++;\\n        }\\n        orgs[safeAddress].approvers[currentapprover] = SENTINEL_ADDRESS;\\n        emit OrgOnboarded(safeAddress, _approvers, _approvers);\\n    }\\n\\n    /**\\n        * @dev Offboard an Org, remove all approvers and delete the Org\\n        * @param _safeAddress - Address of the Org\\n     */    \\n    function offboard(\\n        address _safeAddress\\n    )\\n        external\\n        onlyOnboarded(_safeAddress)\\n        onlyMultisig(_safeAddress)\\n    {\\n        // Remove all approvers in Orgs\\n        address currentapprover = orgs[_safeAddress].approvers[\\n            SENTINEL_ADDRESS\\n        ];\\n        while (currentapprover != SENTINEL_ADDRESS) {\\n            address nextapprover = orgs[_safeAddress].approvers[\\n                currentapprover\\n            ];\\n            delete orgs[_safeAddress].approvers[currentapprover];\\n            currentapprover = nextapprover;\\n        }\\n\\n        delete orgs[_safeAddress];\\n        emit OrgOffboarded(_safeAddress);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.9\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/signature/Signature.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract SignatureEIP712 {\\n    using ECDSA for bytes32;\\n\\n    // Domain Data Struct\\n    struct EIP712Domain {\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    // PayrollTx Struct\\n    // A Owner can Approve the N numbers of Hash\\n    // hash = encodeTransactionData(recipient, tokenAddress, amount, nonce)\\n    struct PayrollTx {\\n        bytes32 rootHash;\\n    }\\n\\n    // Domain Typehash\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\")\\n        );\\n\\n    // Message Typehash\\n    bytes32 internal constant PAYROLL_TX_TYPEHASH =\\n        keccak256(bytes(\\\"PayrollTx(bytes32 rootHash)\\\"));\\n\\n    function getChainId() internal view returns (uint256 chainId) {\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    bytes32 internal DOMAIN_SEPARATOR =\\n        keccak256(\\n            abi.encode(EIP712_DOMAIN_TYPEHASH, getChainId(), address(this))\\n        );\\n\\n    // Check for the Signature validity in EIP712 format\\n    function validatePayrollTxHashes(\\n        bytes32 rootHash,\\n        bytes memory signature\\n    ) internal view returns (address) {\\n        PayrollTx memory payroll = PayrollTx({rootHash: rootHash});\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PAYROLL_TX_TYPEHASH, payroll.rootHash))\\n            )\\n        );\\n\\n        address signer = digest.recover(signature);\\n        return signer;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.9\"},\"contracts/interfaces/index.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface GnosisSafe {\\n  /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n  /// @param to Destination address of module transaction.\\n  /// @param value Ether value of module transaction.\\n  /// @param data Data payload of module transaction.\\n  /// @param operation Operation type of module transaction.\\n  function execTransactionFromModule(\\n    address to,\\n    uint256 value,\\n    bytes calldata data,\\n    uint256 operation\\n  ) external returns (bool success);\\n}\\n\\ninterface AlowanceModule {\\n  struct Allowance {\\n    uint96 amount;\\n    uint96 spent;\\n    uint16 resetTimeMin; // Maximum reset time span is 65k minutes\\n    uint32 lastResetMin;\\n    uint16 nonce;\\n  }\\n\\n  function executeAllowanceTransfer(\\n    GnosisSafe safe,\\n    address token,\\n    address payable to,\\n    uint96 amount,\\n    address paymentToken,\\n    uint96 payment,\\n    address delegate,\\n    bytes memory signature\\n  ) external;\\n\\n  function getTokenAllowance(\\n    address safe,\\n    address delegate,\\n    address token\\n  ) external view returns (uint256[5] memory);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/utils/TransactionEncoder.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract TransactionEncoder {\\n    /**\\n     * @dev Encode the transaction data for the payroll payout\\n     * @param to Address to send the funds to\\n     * @param tokenAddress Address of the token to send\\n     * @param amount Amount of tokens to send\\n     * @param payoutNonce Payout nonce to use\\n     * @return encodedHash Encoded hash of the transaction data\\n     */\\n    function encodeTransactionData(\\n        address to,\\n        address tokenAddress,\\n        uint256 amount,\\n        uint64 payoutNonce\\n    ) public pure returns (bytes32) {\\n        bytes32 encodedHash = keccak256(\\n            abi.encode(to, tokenAddress, amount, payoutNonce)\\n        );\\n        return encodedHash;\\n    }\\n\\n     /**\\n     * @dev Sends multiple transactions and reverts all if one fails.\\n     * @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\\n     *                     operation has to be uint8(0) in this version (=> 1 byte),\\n     *                     to as a address (=> 20 bytes),\\n     *                     value as a uint256 (=> 32 bytes),\\n     *                     data length as a uint256 (=> 32 bytes),\\n     *                     data as bytes.\\n     *                     see abi.encodePacked for more information on packed encoding\\n     * @notice The code is for most part the same as the normal MultiSend (to keep compatibility),\\n     *         but reverts if a transaction tries to use a delegatecall.\\n     * @notice This method is payable as delegatecalls keep the msg.value from the previous call\\n     *         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\\n     */\\n    function multiSend(bytes memory transactions) public payable {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let length := mload(transactions)\\n            let i := 0x20\\n            for {\\n                // Pre block is not used in \\\"while mode\\\"\\n            } lt(i, length) {\\n                // Post block is not used in \\\"while mode\\\"\\n            } {\\n                // First byte of the data is the operation.\\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\\n                // This will also zero out unused data.\\n                let operation := shr(0xf8, mload(add(transactions, i)))\\n                // We offset the load address by 1 byte (operation byte)\\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\\n                let value := mload(add(transactions, add(i, 0x15)))\\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\\n                let dataLength := mload(add(transactions, add(i, 0x35)))\\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\\n                let data := add(transactions, add(i, 0x55))\\n                let success := 0\\n                switch operation\\n                case 0 {\\n                    success := call(gas(), to, value, data, dataLength, 0, 0)\\n                }\\n                // This version does not allow delegatecalls\\n                case 1 {\\n                    revert(0, 0)\\n                }\\n                if eq(success, 0) {\\n                    revert(0, 0)\\n                }\\n                // Next entry starts at 85 byte + data length\\n                i := add(i, add(0x55, dataLength))\\n            }\\n        }\\n    }\\n\\n}\",\"versionPragma\":\"^0.8.0\"},\"contracts/payroll/Storage.sol\":{\"content\":\"//contracts/Organizer.sol\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Storage for Organizer Contract\\n\\nabstract contract Storage {\\n    /**\\n     * @dev Struct for ORG\\n     * @param approverCount Number of approvers in the org\\n     * @param approvers Linked list of approvers\\n     * @param approvalsRequired Number of approvals required for a single payout\\n     * @param claimables Mapping of claimables\\n     * @param autoClaim Mapping of autoClaim\\n     */\\n    struct ORG {\\n        uint256 approverCount;\\n        mapping(address => address) approvers;\\n        // mapping(address => ApprovalLevel[]) approvalMatrices;\\n        uint256 approvalsRequired;\\n        mapping(address => mapping(address => uint96)) claimables;\\n        mapping(address => bool) autoClaim;\\n    }\\n\\n    // Address of the Allowance Module\\n    address ALLOWANCE_MODULE;\\n\\n    // Enum for Operation\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n\\n    //  Sentinels to use with linked lists\\n    address internal constant SENTINEL_ADDRESS = address(0x1);\\n    address internal MASTER_OPERATOR;\\n    uint256 internal constant SENTINEL_UINT = 1;\\n\\n    /**\\n     * @dev Storage for Organisations\\n     * Mapping of org's safe address to ORG struct\\n     */\\n    mapping(address => ORG) orgs;\\n\\n    /**\\n     * @dev Storage for root nodes of approved payout merkle trees\\n     * Mapping of root node to boolean, true if approved, false if not\\n     */\\n    mapping(bytes32 => bool) approvedNodes;\\n\\n    /**\\n     * @dev Storage for packed payout nonces\\n     * Array of uint256, each uint256 represents 256 payout nonces\\n     * Each payout nonce is packed into a uint256, so the index of the uint256 in the array is the payout nonce / 256\\n     * The bit index of the uint256 is the payout nonce % 256\\n     * If the bit is set, the payout nonce has been used, if not, it has not been used\\n     */\\n    uint256[] packedPayoutNonces;\\n\\n    // Null Pointer for linked list\\n    bytes32 public constant NULL_BYTES = bytes32(0);\\n\\n    // Sentinel for linked list\\n    bytes32 public constant SENTINEL_BYTES = keccak256(\\\"SENTINEL\\\");\\n\\n    // Linked list of approved roots\\n    mapping (bytes32 => bytes32) approvedRoots;\\n    \\n    // Mapping of tokens to Fetch in current cycle\\n    mapping (address => uint96) public tokensToFetch;\\n\\n    // List of token Addresses to fetch\\n    address[] paymentTokens;\\n\\n    // Struct for Payout\\n    struct Payout {\\n        address payable recipient;\\n        address tokenAddress;\\n        uint96 amount;\\n        uint64 payoutNonce;\\n        bytes32[] merkleRoots;\\n        bytes32[][] merkleProofs;\\n        bytes[] rootSignatures;\\n    }\\n\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/payroll/Validators.sol\":{\"content\":\"//contracts/Organizer.sol\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./Storage.sol\\\";\\n\\n/// @title Validators for Organizer Contract\\nabstract contract Validators is Storage {\\n    /**\\n     * @dev Check if the address is an approver on the Org\\n     * @param _safeAddress Address of the Org\\n     * @param _addressToCheck Address to check\\n     * @return bool true if the address is an approver\\n     */\\n    function isApprover(\\n        address _safeAddress,\\n        address _addressToCheck\\n    ) public view returns (bool) {\\n        require(_addressToCheck != address(0), \\\"CS001\\\");\\n        require(_addressToCheck != SENTINEL_ADDRESS, \\\"CS001\\\");\\n        require(isOrgOnboarded(_safeAddress), \\\"CS009\\\");\\n        return _isApprover(_safeAddress, _addressToCheck);\\n    }\\n\\n    /**\\n     * @dev Check if the address is an approver\\n     * @param _safeAddress Address of the Org\\n     * @param _addressToCheck Address to check\\n     * @return bool true if the address is an approver\\n     */\\n    function _isApprover(\\n        address _safeAddress,\\n        address _addressToCheck\\n    ) internal view returns (bool) {\\n        return orgs[_safeAddress].approvers[_addressToCheck] != address(0);\\n    }\\n\\n    /**\\n     * @dev Check if the Org is onboarded\\n     * @param _addressToCheck Address of the Org\\n     * @return bool true if the Org is onboarded\\n     */\\n    function isOrgOnboarded(\\n        address _addressToCheck\\n    ) public view returns (bool) {\\n        require(_addressToCheck != address(0), \\\"CS003\\\");\\n        return orgs[_addressToCheck].approverCount > 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/payroll/Modifiers.sol\":{\"content\":\"//contracts/Organizer.sol\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./Validators.sol\\\";\\n\\n/// @title Modifiers for Organizer Contract\\nabstract contract Modifiers is Validators {\\n    //\\n    //  Modifiers\\n    //\\n\\n    /**\\n     * @dev Check if the Org is onboarded\\n     * @param _safeAddress Address of the Org\\n     */\\n    modifier onlyOnboarded(address _safeAddress) {\\n        require(isOrgOnboarded(_safeAddress), \\\"CS009\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check if the sender is the multisig\\n     * @param _safeAddress Address of the Org\\n     */\\n    modifier onlyMultisig(address _safeAddress) {\\n        require(msg.sender == _safeAddress, \\\"CS010\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check if the sender is an approver\\n     * @param _safeAddress Address of the Org\\n     */\\n    modifier onlyApprover(address _safeAddress) {\\n        require(isApprover(_safeAddress, msg.sender), \\\"CS011\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check if the sender is an approver or the multisig\\n     * @param _safeAddress Address of the Org\\n     */\\n    modifier onlyApproverOrMultisig(address _safeAddress) {\\n        require(\\n            isApprover(_safeAddress, msg.sender) || msg.sender == _safeAddress,\\n            \\\"CS012\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/utils/BitPacker.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../payroll/Modifiers.sol\\\";\\n\\n\\nabstract contract BitPacker is Modifiers {\\n    /**\\n     * @dev Set usage status of a payout nonce\\n     * @param flag Boolean to pack, true for used, false for unused\\n     * @param payoutNonce Payout nonce to set\\n     */\\n    function packPayoutNonce(bool flag, uint256 payoutNonce) internal {\\n        uint256 slot = payoutNonce / 256;\\n        uint256 bitIndex = payoutNonce % 256;\\n\\n        if (slot >= packedPayoutNonces.length) {\\n            packedPayoutNonces.push(1);\\n        }\\n\\n        if (flag) {\\n            packedPayoutNonces[slot] |= 1 << bitIndex;\\n        } else {\\n            packedPayoutNonces[slot] &= ~(1 << bitIndex);\\n        }\\n    }\\n\\n    /**\\n     * @dev Get usage status of a payout nonce\\n     * @param payoutNonce Payout nonce to check\\n     * @return Boolean, true for used, false for unused\\n     */\\n    function getPayoutNonce(uint256 payoutNonce) internal view returns (bool) {\\n        uint256 slotIndex = payoutNonce / 256;\\n        uint256 bitIndex = payoutNonce % 256;\\n        if (\\n            packedPayoutNonces.length == 0 ||\\n            packedPayoutNonces.length < slotIndex\\n        ) {\\n            return false;\\n        } else {\\n            return (packedPayoutNonces[slotIndex] & (1 << bitIndex)) != 0;\\n        }\\n    }\\n}\",\"versionPragma\":\"^0.8.0\"},\"contracts/payroll/GnosisHelper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/index.sol\\\";\\nimport \\\"../utils/BitPacker.sol\\\";\\n\\ncontract GnosisHelper is BitPacker {\\n     /**\\n     * @dev Execute transaction from Gnosis Safe\\n     * @param safeAddress Address of the Gnosis Safe\\n     * @param tokenAddress Address of the token to send\\n     * @param amount Amount of tokens to send\\n     * @param signature Signature of the transaction\\n     */\\n    function execTransactionFromGnosis(\\n        address safeAddress,\\n        address tokenAddress,\\n        uint96 amount,\\n        bytes memory signature\\n    ) internal {\\n        AlowanceModule allowance = AlowanceModule(ALLOWANCE_MODULE);\\n\\n        address payable to = payable(address(this));\\n\\n        // Execute payout via allowance module\\n        allowance.executeAllowanceTransfer(\\n            GnosisSafe(safeAddress),\\n            tokenAddress,\\n            to,\\n            amount,\\n            0x0000000000000000000000000000000000000000,\\n            0,\\n            address(this),\\n            signature\\n        );\\n    }\\n\\n}\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/payroll/PayrollManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n// Module Imports\\nimport \\\"./Validators.sol\\\";\\nimport \\\"../signature/Signature.sol\\\";\\nimport \\\"../interfaces/index.sol\\\";\\nimport \\\"./GnosisHelper.sol\\\";\\nimport \\\"../utils/TransactionEncoder.sol\\\";\\n\\ncontract PayrollManager is SignatureEIP712, GnosisHelper, TransactionEncoder {\\n\\n    /**\\n     * @dev Validate the root hashes of payout data, save them and fetch the required tokens from the Gnosis Safe\\n     * @param safeAddress Address of the Org\\n     * @param roots Array of merkle roots to validate\\n     * @param signatures Array of signatures to validate\\n     * @param paymentTokens Array of payment tokens to fetch from Multisig\\n     * @param payoutAmounts Array of payout amounts to fetch from Multisig\\n     */\\n    function validatePayouts(\\n        address safeAddress,\\n        bytes32[] memory roots,\\n        bytes[] memory signatures,\\n        address[] memory paymentTokens,\\n        uint96[] memory payoutAmounts\\n    ) external onlyOnboarded(safeAddress) {\\n        require(roots.length == signatures.length, \\\"CS004\\\");\\n        require(paymentTokens.length == payoutAmounts.length, \\\"CS004\\\");\\n\\n        bool isNewAdded;\\n        for (uint96 i = 0; i < roots.length; i++) {\\n            if (!approvedNodes[roots[i]]) {\\n                address signer = validatePayrollTxHashes(\\n                    roots[i],\\n                    signatures[i]\\n                );\\n                require(_isApprover(safeAddress, signer), \\\"CS014\\\");\\n                approvedNodes[roots[i]] = true;\\n                isNewAdded = true;\\n            }\\n        }\\n\\n        if (isNewAdded) {\\n            {\\n                for (uint96 index = 0; index < paymentTokens.length; index++) {\\n                    execTransactionFromGnosis(\\n                        safeAddress,\\n                        paymentTokens[index],\\n                        payoutAmounts[index],\\n                        bytes(\\\"\\\")\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Execute the payout\\n     * @param to Address to send the funds to\\n     * @param tokenAddress Address of the token to send\\n     * @param amount Amount of tokens to send\\n     * @param payoutNonce Payout nonce to use\\n     * @param safeAddress Address of the Org\\n     * @param proof Array of merkle proofs to validate\\n     * @param roots Array of merkle roots to validate\\n     */\\n    function executePayout(\\n        address payable to,\\n        address tokenAddress,\\n        uint256 amount,\\n        uint64 payoutNonce,\\n        address safeAddress,\\n        bytes32[][] memory proof,\\n        bytes32[] memory roots\\n    ) external onlyOnboarded(safeAddress) {\\n        require(roots.length == proof.length, \\\"CS004\\\");\\n        bytes32 leaf = encodeTransactionData(\\n            to,\\n            tokenAddress,\\n            amount,\\n            payoutNonce\\n        );\\n\\n        if (packedPayoutNonces.length == 0 || !getPayoutNonce(payoutNonce)) {\\n            uint96 approvals;\\n\\n            for (uint96 i = 0; i < roots.length; i++) {\\n                if (\\n                    MerkleProof.verify(proof[i], roots[i], leaf) &&\\n                    approvedNodes[roots[i]] == true\\n                ) {\\n                    approvals += 1;\\n                }\\n            }\\n\\n            if (approvals >= orgs[safeAddress].approvalsRequired) {\\n                // Create Ether or IRC20 Transfer\\n                IERC20 erc20 = IERC20(tokenAddress);\\n                erc20.transfer(to, amount);\\n                packPayoutNonce(true, payoutNonce);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Validates and Executes a list of payouts in a single transaction\\n     * @param payouts Array of payouts to execute\\n     * @param safeAddress Address of the Org\\n     */\\n    function executePayouts(\\n        Payout[] calldata payouts,\\n        address safeAddress\\n    ) external onlyOnboarded(safeAddress) {\\n\\n        // Memory for Approved payouts\\n        bool[] memory approvedPayouts = new bool[](payouts.length);\\n\\n        // Loop through all payouts\\n        for (uint8 i = 0; i < payouts.length; i++) {\\n            // Validate input lengths to prevent out of bounds errors\\n            require(\\n                payouts[i].merkleProofs.length == payouts[i].merkleRoots.length && payouts[i].merkleRoots.length == payouts[i].rootSignatures.length,\\n                \\\"CS004\\\"\\n            );\\n\\n            // If the payout nonce is already packed, revert the transaction\\n            if (packedPayoutNonces.length != 0 && getPayoutNonce(payouts[i].payoutNonce)) {\\n                revert(\\\"CS017\\\");\\n            }\\n\\n            // Initialize the number of approvals for the current payout\\n            uint8 approvals = 0;\\n            \\n            // Get the leaf hash for the current payout\\n            bytes32 leaf = encodeTransactionData(\\n                payouts[i].recipient,\\n                payouts[i].tokenAddress,\\n                payouts[i].amount,\\n                payouts[i].payoutNonce\\n            );\\n            \\n            // For each payout, loop through all roots \\n            for (uint8 j = 0; j < payouts[i].merkleRoots.length; j++) {\\n                \\n                // For each root, check if it is a part of approvedRoots\\n                // If it is not, the mapping will return 0x00 (NULL_BYTES)\\n                if (approvedRoots[payouts[i].merkleRoots[j]] == NULL_BYTES) {\\n                    \\n                    // Validate the root against the signature\\n                    address signer = validatePayrollTxHashes(\\n                        payouts[i].merkleRoots[j],\\n                        payouts[i].rootSignatures[j]\\n                    );\\n                        // If the root is from a valid approver, add it to approvedRoots\\n                        if (_isApprover(safeAddress, signer)) { \\n                            approvedRoots[payouts[i].merkleRoots[j]] = approvedRoots[SENTINEL_BYTES];\\n                            approvedRoots[SENTINEL_BYTES] = payouts[i].merkleRoots[j];\\n                        }\\n                        // Else, revert\\n                        else {\\n                            revert(\\\"CS014\\\");\\n                        }\\n                }\\n                    // If it is part of approvedRoots, verify if current leaf is part of the root\\n                if (MerkleProof.verify(payouts[i].merkleProofs[j], payouts[i].merkleRoots[j], leaf)) {\\n                    // If it is, increment approval count\\n                    approvals += 1;\\n                    // If the token amount to be fetched is 0, it gets added in next step.\\n                    // So add the token to the paymentTokens array\\n                    if (tokensToFetch[payouts[i].tokenAddress] == 0) {\\n                        paymentTokens.push(payouts[i].tokenAddress);\\n                    }\\n\\n                    // Increment amount to be fetched from the allowance module\\n                    tokensToFetch[payouts[i].tokenAddress] += uint96(payouts[i].amount);\\n                } else {\\n                    // Else, revert\\n                    revert(\\\"CS016\\\");\\n                }\\n            }\\n\\n            // If approval count is greater than or equal to approvalsRequired, mark payout as approved\\n            if (approvals >= orgs[safeAddress].approvalsRequired) {\\n                approvedPayouts[i] = true;\\n            }\\n        }\\n\\n        // Fetch all tokens from the Safe\\n        for (uint8 index = 0; index < paymentTokens.length; index++) {\\n            execTransactionFromGnosis(\\n                safeAddress,\\n                paymentTokens[index],\\n                tokensToFetch[paymentTokens[index]],\\n                bytes(\\\"\\\")\\n            );\\n            // Delete the token from the tokensToFetch array\\n            delete tokensToFetch[paymentTokens[index]];\\n        }\\n        \\n\\n\\n        // For each payout, if it is approved, execute it\\n        for (uint8 i = 0; i < payouts.length; i++) {\\n            if (approvedPayouts[i]) {\\n                // Create Ether or IRC20 Transfer\\n                IERC20 erc20 = IERC20(payouts[i].tokenAddress);\\n                erc20.transfer(payouts[i].recipient, payouts[i].amount);\\n                packPayoutNonce(true, payouts[i].payoutNonce);\\n            }\\n        }\\n\\n        // Clean up the paymentTokens array\\n        delete paymentTokens;\\n\\n        // Clean up the approvedRoots linked list\\n        while (approvedRoots[SENTINEL_BYTES] != NULL_BYTES) {\\n            bytes32 root = approvedRoots[SENTINEL_BYTES];\\n            approvedRoots[SENTINEL_BYTES] = approvedRoots[root];\\n            delete approvedRoots[root];\\n        }\\n        \\n    }\\n}\\n\",\"versionPragma\":\"^0.8.9\"},\"contracts/payroll/ApproverManager.sol\":{\"content\":\"//contracts/Organizer.sol\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./Modifiers.sol\\\";\\n\\n/// @title Approver Manager for Organizer Contract\\nabstract contract ApproverManager is Modifiers {\\n    // Events\\n    event ApproverAdded(address indexed safeAddress, address indexed operator);\\n    event ApproverRemoved(\\n        address indexed safeAddress,\\n        address indexed operator\\n    );\\n\\n    /**\\n     * @dev Get list of approvers for Org\\n     * @param _safeAddress Address of the Org\\n     * @return Array of approvers\\n     */\\n    function getApprovers(\\n        address _safeAddress\\n    ) public view onlyOnboarded(_safeAddress) returns (address[] memory) {\\n        address[] memory array = new address[](\\n            orgs[_safeAddress].approverCount\\n        );\\n\\n        uint8 i = 0;\\n        address currentOp = orgs[_safeAddress].approvers[SENTINEL_ADDRESS];\\n        while (currentOp != SENTINEL_ADDRESS) {\\n            array[i] = currentOp;\\n            currentOp = orgs[_safeAddress].approvers[currentOp];\\n            i++;\\n        }\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Get count of approvers for Org\\n     * @param _safeAddress Address of the Org\\n     * @return Count of approvers\\n     */\\n    function getApproverCount(\\n        address _safeAddress\\n    ) external view onlyOnboarded(_safeAddress) returns (uint256) {\\n        return orgs[_safeAddress].approverCount;\\n    }\\n\\n    /**\\n     * @dev Get required Threshold for Org\\n     * @param _safeAddress Address of the Org\\n     * @return Threshold Count\\n     */\\n    function getThreshold(\\n        address _safeAddress\\n    ) external view onlyOnboarded(_safeAddress) returns (uint256) {\\n        return orgs[_safeAddress].approvalsRequired;\\n    }\\n\\n    /**\\n     * @dev Modify approvers for Org\\n     * @param _safeAddress Address of the Org\\n     * @param _addressesToAdd Array of addresses to add as approvers\\n     * @param _addressesToRemove Array of addresses to remove as approvers\\n     * @param newThreshold new threshold to updated according to new approvers\\n     */\\n    function modifyApprovers(\\n        address _safeAddress,\\n        address[] calldata _addressesToAdd,\\n        address[] calldata _addressesToRemove,\\n        uint256 newThreshold\\n    ) public onlyOnboarded(_safeAddress) onlyMultisig(_safeAddress) {\\n        require(newThreshold != 0, \\\"CS015\\\");\\n\\n        for (uint256 i = 0; i < _addressesToAdd.length; i++) {\\n            address _addressToAdd = _addressesToAdd[i];\\n            require(\\n                _addressToAdd != address(0) &&\\n                    _addressToAdd != SENTINEL_ADDRESS &&\\n                    _addressToAdd != address(this) &&\\n                    _addressToAdd != _safeAddress,\\n                \\\"CS001\\\"\\n            );\\n            require(\\n                orgs[_safeAddress].approvers[_addressToAdd] == address(0),\\n                \\\"CS002\\\"\\n            );\\n\\n            _addApprover(_safeAddress, _addressToAdd);\\n        }\\n\\n        for (uint256 i = 0; i < _addressesToRemove.length; i++) {\\n            address _addressToRemove = _addressesToRemove[i];\\n            require(\\n                _addressToRemove != address(0) &&\\n                    _addressToRemove != SENTINEL_ADDRESS &&\\n                    _addressToRemove != address(this) &&\\n                    _addressToRemove != _safeAddress,\\n                \\\"CS001\\\"\\n            );\\n            require(\\n                orgs[_safeAddress].approvers[_addressToRemove] != address(0),\\n                \\\"CS013\\\"\\n            );\\n\\n            _removeApprover(_safeAddress, _addressToRemove);\\n        }\\n\\n        orgs[_safeAddress].approvalsRequired = newThreshold;\\n    }\\n\\n    /**\\n     * @dev Add an approver to Org\\n     * @param _safeAddress Address of the Org\\n     * @param _approver Address of the approver\\n     */\\n    function _addApprover(address _safeAddress, address _approver) internal {\\n        orgs[_safeAddress].approvers[_approver] = orgs[_safeAddress].approvers[\\n            SENTINEL_ADDRESS\\n        ];\\n        orgs[_safeAddress].approvers[SENTINEL_ADDRESS] = _approver;\\n        orgs[_safeAddress].approverCount++;\\n    }\\n\\n    // Remove an approver from a Orgs\\n    function _removeApprover(address _safeAddress, address _approver) internal {\\n        address cursor = SENTINEL_ADDRESS;\\n        while (orgs[_safeAddress].approvers[cursor] != _approver) {\\n            cursor = orgs[_safeAddress].approvers[cursor];\\n        }\\n        orgs[_safeAddress].approvers[cursor] = orgs[_safeAddress].approvers[\\n            _approver\\n        ];\\n        orgs[_safeAddress].approvers[_approver] = address(0);\\n        orgs[_safeAddress].approverCount--;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x0D5d9C5E44F98b3D4f78373b81C3A2ddA8CBF98D","bytecode":"0x60e060405260376080818152906200325060a039805160209091012046604080516020810193909352820152306060820152608001604051602081830303815290604052805190602001206000553480156200005a57600080fd5b5060405162003287380380620032878339810160408190526200007d9162000123565b6009805460ff19169055600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790557fd3eedd6d69d410e954f4c622838ecc3acae9fdcd83cad412075c85b092770656600090815260066020527f92c0cd5d0d4f1126f4dc909af53875c49c1b71de9e8af67dd682f6f0990659cd556200015b565b80516001600160a01b03811681146200011e57600080fd5b919050565b600080604083850312156200013757600080fd5b620001428362000106565b9150620001526020840162000106565b90509250929050565b6130e5806200016b6000396000f3fe6080604052600436106100de5760003560e01c806364f9b9b91161008557806364f9b9b9146101f557806378977168146102155780638454e22c146102355780638d80ff0a146102555780639146a77514610268578063b9f96f4014610295578063e3f1b42e146102b5578063e686840f146102d5578063e7bc30621461032357600080fd5b806307cd9269146100e3578063090bcd5814610118578063113bc8871461013a5780631c701d4e1461015a57806321426a481461017d57806331aa06cb1461019d578063523e99ae146101bd5780635c975abb146101dd575b600080fd5b3480156100ef57600080fd5b506101036100fe3660046124da565b610345565b60405190151581526020015b60405180910390f35b34801561012457600080fd5b506101386101333660046125e7565b6103a8565b005b34801561014657600080fd5b50610103610155366004612711565b6105cc565b34801561016657600080fd5b5061016f600081565b60405190815260200161010f565b34801561018957600080fd5b5061013861019836600461278e565b610654565b3480156101a957600080fd5b506101386101b83660046127d9565b6108b2565b3480156101c957600080fd5b5061016f6101d83660046124da565b6114f0565b3480156101e957600080fd5b5060095460ff16610103565b34801561020157600080fd5b5061013861021036600461297b565b611535565b34801561022157600080fd5b5061016f6102303660046124da565b61176a565b34801561024157600080fd5b50610138610250366004612aac565b6117b2565b610138610263366004612b36565b611a8f565b34801561027457600080fd5b506102886102833660046124da565b611b08565b60405161010f9190612b72565b3480156102a157600080fd5b506101386102b03660046124da565b611c39565b3480156102c157600080fd5b5061016f6102d0366004612bbf565b611d52565b3480156102e157600080fd5b5061030b6102f03660046124da565b6007602052600090815260409020546001600160601b031681565b6040516001600160601b03909116815260200161010f565b34801561032f57600080fd5b5061016f60008051602061309083398151915281565b60006001600160a01b03821661038a5760405162461bcd60e51b8152602060048201526005602482015264435330303360d81b60448201526064015b60405180910390fd5b506001600160a01b0316600090815260036020526040902054151590565b826103b281610345565b6103ce5760405162461bcd60e51b815260040161038190612c10565b82518251146103ef5760405162461bcd60e51b815260040161038190612c2f565b60006103fd89898989611d52565b600554909150158061041e575061041c866001600160401b0316611da5565b155b156105c1576000805b8451816001600160601b031610156104f75761048886826001600160601b03168151811061045757610457612c4e565b602002602001015186836001600160601b03168151811061047a5761047a612c4e565b602002602001015185611e17565b80156104d257506004600086836001600160601b0316815181106104ae576104ae612c4e565b60209081029190910181015182528101919091526040016000205460ff1615156001145b156104e5576104e2600183612c7a565b91505b806104ef81612ca5565b915050610427565b506001600160a01b0386166000908152600360205260409020600201546001600160601b038216106105bf5760405163a9059cbb60e01b81526001600160a01b038b81166004830152602482018a90528a919082169063a9059cbb90604401602060405180830381600087803b15801561057057600080fd5b505af1158015610584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a89190612ccc565b506105bd6001896001600160401b0316611e2d565b505b505b505050505050505050565b60006001600160a01b0382166105f45760405162461bcd60e51b815260040161038190612cee565b6001600160a01b0382166001141561061e5760405162461bcd60e51b815260040161038190612cee565b61062783610345565b6106435760405162461bcd60e51b815260040161038190612c10565b61064d8383611ef3565b9392505050565b3333836106735760405162461bcd60e51b815260040161038190612d2c565b828410156106935760405162461bcd60e51b815260040161038190612d2c565b6001600160a01b03811660009081526003602052604081208181556002018490556001905b858110156108115760008787838181106106d4576106d4612c4e565b90506020020160208101906106e991906124da565b90506001600160a01b0381161580159061070d57506001600160a01b038116600114155b801561072257506001600160a01b0381163014155b80156107405750806001600160a01b0316836001600160a01b031614155b61075c5760405162461bcd60e51b815260040161038190612cee565b6001600160a01b038481166000908152600360209081526040808320858516845260010190915290205416156107a45760405162461bcd60e51b815260040161038190612d4b565b6001600160a01b0384811660008181526003602081815260408084209886168452600189018252832080546001600160a01b031916958716959095179094559181529152835491938492916107f883612d6a565b919050555050808061080990612d6a565b9150506106b8565b506001600160a01b038083166000908152600360209081526040808320938516835260019384019091529081902080546001600160a01b0319169092179091555161085f9087908790612d85565b6040518091039020826001600160a01b03167fcc78a51061ab3534a9c926383d2e9693d6e839e84b27cdcbfbe9784c2beb4a9488886040516108a2929190612dc7565b60405180910390a3505050505050565b806108bc81610345565b6108d85760405162461bcd60e51b815260040161038190612c10565b6000836001600160401b038111156108f2576108f2612513565b60405190808252806020026020018201604052801561091b578160200160208202803683370190505b50905060005b60ff81168511156111ad5785858260ff1681811061094157610941612c4e565b90506020028101906109539190612e0a565b610961906080810190612e2a565b905086868360ff1681811061097857610978612c4e565b905060200281019061098a9190612e0a565b6109989060a0810190612e2a565b9050148015610a12575085858260ff168181106109b7576109b7612c4e565b90506020028101906109c99190612e0a565b6109d79060c0810190612e2a565b905086868360ff168181106109ee576109ee612c4e565b9050602002810190610a009190612e0a565b610a0e906080810190612e2a565b9050145b610a2e5760405162461bcd60e51b815260040161038190612c2f565b60055415801590610a835750610a8386868360ff16818110610a5257610a52612c4e565b9050602002810190610a649190612e0a565b610a75906080810190606001612e73565b6001600160401b0316611da5565b15610ab85760405162461bcd60e51b8152602060048201526005602482015264435330313760d81b6044820152606401610381565b600080610ba488888560ff16818110610ad357610ad3612c4e565b9050602002810190610ae59190612e0a565b610af39060208101906124da565b89898660ff16818110610b0857610b08612c4e565b9050602002810190610b1a9190612e0a565b610b2b9060408101906020016124da565b8a8a8760ff16818110610b4057610b40612c4e565b9050602002810190610b529190612e0a565b610b63906060810190604001612e8e565b6001600160601b03168b8b8860ff16818110610b8157610b81612c4e565b9050602002810190610b939190612e0a565b6102d0906080810190606001612e73565b905060005b88888560ff16818110610bbe57610bbe612c4e565b9050602002810190610bd09190612e0a565b610bde906080810190612e2a565b90508160ff16101561114a5760006006818b8b60ff8916818110610c0457610c04612c4e565b9050602002810190610c169190612e0a565b610c24906080810190612e2a565b8560ff16818110610c3757610c37612c4e565b905060200201358152602001908152602001600020541415610e70576000610d3b8a8a8760ff16818110610c6d57610c6d612c4e565b9050602002810190610c7f9190612e0a565b610c8d906080810190612e2a565b8460ff16818110610ca057610ca0612c4e565b905060200201358b8b8860ff16818110610cbc57610cbc612c4e565b9050602002810190610cce9190612e0a565b610cdc9060c0810190612e2a565b8560ff16818110610cef57610cef612c4e565b9050602002810190610d019190612ea9565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611f2392505050565b9050610d478882611ef3565b15610e565760008051602061309083398151915260009081526006602081905260008051602061307083398151915254918c8c60ff8a16818110610d8d57610d8d612c4e565b9050602002810190610d9f9190612e0a565b610dad906080810190612e2a565b8660ff16818110610dc057610dc0612c4e565b9050602002013581526020019081526020016000208190555089898660ff16818110610dee57610dee612c4e565b9050602002810190610e009190612e0a565b610e0e906080810190612e2a565b8360ff16818110610e2157610e21612c4e565b600080516020613090833981519152600052600660209081520291909101356000805160206130708339815191525550610e6e565b60405162461bcd60e51b815260040161038190612eef565b505b610f5589898660ff16818110610e8857610e88612c4e565b9050602002810190610e9a9190612e0a565b610ea89060a0810190612e2a565b8360ff16818110610ebb57610ebb612c4e565b9050602002810190610ecd9190612e2a565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d92508c91505060ff8816818110610f1557610f15612c4e565b9050602002810190610f279190612e0a565b610f35906080810190612e2a565b8460ff16818110610f4857610f48612c4e565b9050602002013584611e17565b1561110857610f65600184612f0e565b9250600760008a8a8760ff16818110610f8057610f80612c4e565b9050602002810190610f929190612e0a565b610fa39060408101906020016124da565b6001600160a01b031681526020810191909152604001600020546001600160601b031661103757600889898660ff16818110610fe157610fe1612c4e565b9050602002810190610ff39190612e0a565b6110049060408101906020016124da565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790555b88888560ff1681811061104c5761104c612c4e565b905060200281019061105e9190612e0a565b61106f906060810190604001612e8e565b600760008b8b8860ff1681811061108857611088612c4e565b905060200281019061109a9190612e0a565b6110ab9060408101906020016124da565b6001600160a01b031681526020810191909152604001600090812080549091906110df9084906001600160601b0316612c7a565b92506101000a8154816001600160601b0302191690836001600160601b03160217905550611138565b60405162461bcd60e51b815260206004820152600560248201526421a998189b60d91b6044820152606401610381565b8061114281612f33565b915050610ba9565b506001600160a01b03861660009081526003602052604090206002015460ff831610611198576001848460ff168151811061118757611187612c4e565b911515602092830291909101909101525b505080806111a590612f33565b915050610921565b5060005b60085460ff821610156112b4576112518460088360ff16815481106111d8576111d8612c4e565b9060005260206000200160009054906101000a90046001600160a01b03166007600060088660ff168154811061121057611210612c4e565b60009182526020808320909101546001600160a01b03168352828101939093526040918201812054825193840190925282526001600160601b031690611ff5565b6007600060088360ff168154811061126b5761126b612c4e565b60009182526020808320909101546001600160a01b03168352820192909252604001902080546bffffffffffffffffffffffff19169055806112ac81612f33565b9150506111b1565b5060005b60ff811685111561148457818160ff16815181106112d8576112d8612c4e565b60200260200101511561147257600086868360ff168181106112fc576112fc612c4e565b905060200281019061130e9190612e0a565b61131f9060408101906020016124da565b9050806001600160a01b031663a9059cbb88888560ff1681811061134557611345612c4e565b90506020028101906113579190612e0a565b6113659060208101906124da565b89898660ff1681811061137a5761137a612c4e565b905060200281019061138c9190612e0a565b61139d906060810190604001612e8e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526001600160601b03166024820152604401602060405180830381600087803b1580156113ec57600080fd5b505af1158015611400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114249190612ccc565b50611470600188888560ff1681811061143f5761143f612c4e565b90506020028101906114519190612e0a565b611462906080810190606001612e73565b6001600160401b0316611e2d565b505b8061147c81612f33565b9150506112b8565b5061149160086000612493565b5b600080516020613090833981519152600052600660205260008051602061307083398151915254156114e9576006602052600080516020613070833981519152805460009081526040812080549092559055611492565b5050505050565b6000816114fc81610345565b6115185760405162461bcd60e51b815260040161038190612c10565b50506001600160a01b031660009081526003602052604090205490565b8461153f81610345565b61155b5760405162461bcd60e51b815260040161038190612c10565b835185511461157c5760405162461bcd60e51b815260040161038190612c2f565b815183511461159d5760405162461bcd60e51b815260040161038190612c2f565b6000805b8651816001600160601b031610156116d2576004600088836001600160601b0316815181106115d2576115d2612c4e565b60209081029190910181015182528101919091526040016000205460ff166116c057600061164488836001600160601b03168151811061161457611614612c4e565b602002602001015188846001600160601b03168151811061163757611637612c4e565b6020026020010151611f23565b90506116508982611ef3565b61166c5760405162461bcd60e51b815260040161038190612eef565b6001600460008a856001600160601b03168151811061168d5761168d612c4e565b6020026020010151815260200190815260200160002060006101000a81548160ff02191690831515021790555060019250505b806116ca81612ca5565b9150506115a1565b5080156117615760005b8451816001600160601b0316101561175f5761174d8886836001600160601b03168151811061170d5761170d612c4e565b602002602001015186846001600160601b03168151811061173057611730612c4e565b602002602001015160405180602001604052806000815250611ff5565b8061175781612ca5565b9150506116dc565b505b50505050505050565b60008161177681610345565b6117925760405162461bcd60e51b815260040161038190612c10565b50506001600160a01b031660009081526003602052604090206002015490565b856117bc81610345565b6117d85760405162461bcd60e51b815260040161038190612c10565b86336001600160a01b038216146118015760405162461bcd60e51b815260040161038190612d0d565b826118365760405162461bcd60e51b8152602060048201526005602482015264435330313560d81b6044820152606401610381565b60005b8681101561194257600088888381811061185557611855612c4e565b905060200201602081019061186a91906124da565b90506001600160a01b0381161580159061188e57506001600160a01b038116600114155b80156118a357506001600160a01b0381163014155b80156118c15750896001600160a01b0316816001600160a01b031614155b6118dd5760405162461bcd60e51b815260040161038190612cee565b6001600160a01b038a81166000908152600360209081526040808320858516845260010190915290205416156119255760405162461bcd60e51b815260040161038190612d4b565b61192f8a82612066565b508061193a81612d6a565b915050611839565b5060005b84811015611a6657600086868381811061196257611962612c4e565b905060200201602081019061197791906124da565b90506001600160a01b0381161580159061199b57506001600160a01b038116600114155b80156119b057506001600160a01b0381163014155b80156119ce5750896001600160a01b0316816001600160a01b031614155b6119ea5760405162461bcd60e51b815260040161038190612cee565b6001600160a01b038a81166000908152600360209081526040808320858516845260010190915290205416611a495760405162461bcd60e51b8152602060048201526005602482015264435330313360d81b6044820152606401610381565b611a538a826120d6565b5080611a5e81612d6a565b915050611946565b5050506001600160a01b0390951660009081526003602052604090206002019490945550505050565b805160205b81811015611b03578083015160f81c6001820184015160601c601583018501516035840186015160558501870160008560008114611ad957600181146100de57611ae5565b6000808585888a5af191505b5080611af057600080fd5b5050806055018501945050505050611a94565b505050565b606081611b1481610345565b611b305760405162461bcd60e51b815260040161038190612c10565b6001600160a01b0383166000908152600360205260408120546001600160401b03811115611b6057611b60612513565b604051908082528060200260200182016040528015611b89578160200160208202803683370190505b506001600160a01b03808616600090815260036020908152604080832060018085520190915281205492935091165b6001600160a01b038116600114611c2f5780838360ff1681518110611bdf57611bdf612c4e565b6001600160a01b0392831660209182029290920181019190915287821660009081526003825260408082209484168252600190940190915291909120541681611c2781612f33565b925050611bb8565b5090949350505050565b80611c4381610345565b611c5f5760405162461bcd60e51b815260040161038190612c10565b81336001600160a01b03821614611c885760405162461bcd60e51b815260040161038190612d0d565b6001600160a01b038084166000908152600360209081526040808320600180855201909152902054165b6001600160a01b038116600114611d05576001600160a01b0384811660009081526003602090815260408083209484168352600190940190529190912080546001600160a01b0319811690915516611cb2565b6001600160a01b038416600081815260036020526040808220828155600201829055517ffad79252f2a35a653f254aabf7b02e141c2ba535f23ae9e18add88e96d1159729190a250505050565b604080516001600160a01b03958616602080830191909152949095168582015260608501929092526001600160401b03166080808501919091528151808503909101815260a09093019052815191012090565b600080611db461010084612f69565b90506000611dc461010085612f7d565b6005549091501580611dd7575060055482115b15611de6575060009392505050565b806001901b60058381548110611dfe57611dfe612c4e565b9060005260206000200154166000141592505050919050565b600082611e2485846121af565b14949350505050565b6000611e3b61010083612f69565b90506000611e4b61010084612f7d565b6005549091508210611e8c5760058054600181810183556000929092527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001555b8315611ec157806001901b60058381548110611eaa57611eaa612c4e565b600091825260209091200180549091179055611eed565b806001901b1960058381548110611eda57611eda612c4e565b6000918252602090912001805490911690555b50505050565b6001600160a01b039182166000908152600360209081526040808320938516835260019093019052205416151590565b60408051602080820183528482526000805484518086018652601b81527f506179726f6c6c5478286279746573333220726f6f744861736829000000000090840152835185517f8fba187ae9ab8a9763f7172f9bfd506ee0dfef805deabfbabbb76e3a3c44804d818601528087019190915285518082038701815260608201875280519085012061190160f01b6080830152608282019290925260a2808201929092528551808203909201825260c2019094528351939091019290922082611feb82866121fc565b9695505050505050565b60015460405163228ab20d60e11b81526001600160a01b039091169030908290634515641a90612038908990899086908a90600090819084908d90600401612f91565b600060405180830381600087803b15801561205257600080fd5b505af11580156105bf573d6000803e3d6000fd5b6001600160a01b03828116600081815260036020818152604080842060018086528101835281852080548989168088529387208054919099166001600160a01b0319918216179098558054909716909117909555928252909152815491906120cd83612d6a565b91905055505050565b60015b6001600160a01b0383811660009081526003602090815260408083208585168452600101909152902054811690831614612140576001600160a01b0380841660009081526003602090815260408083209484168352600190940190529190912054166120d9565b6001600160a01b0383811660008181526003602081815260408084208887168552600181018352818520805489891687529286208054939098166001600160a01b0319938416179097558654909116909555928252909152815491906121a583613042565b9190505550505050565b600081815b84518110156121f4576121e0828683815181106121d3576121d3612c4e565b6020026020010151612218565b9150806121ec81612d6a565b9150506121b4565b509392505050565b600080600061220b8585612247565b915091506121f48161228d565b600081831061223457600082815260208490526040902061064d565b600083815260208390526040902061064d565b60008082516041141561227e5760208301516040840151606085015160001a612272878285856123d9565b94509450505050612286565b506000905060025b9250929050565b60008160048111156122a1576122a1613059565b14156122aa5750565b60018160048111156122be576122be613059565b14156123075760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610381565b600281600481111561231b5761231b613059565b14156123695760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610381565b600381600481111561237d5761237d613059565b14156123d65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610381565b50565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115612406575060009050600361248a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561245a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166124835760006001925092505061248a565b9150600090505b94509492505050565b50805460008255906000526020600020908101906123d691905b808211156124c157600081556001016124ad565b5090565b6001600160a01b03811681146123d657600080fd5b6000602082840312156124ec57600080fd5b813561064d816124c5565b80356001600160401b038116811461250e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561255157612551612513565b604052919050565b60006001600160401b0382111561257257612572612513565b5060051b60200190565b600082601f83011261258d57600080fd5b813560206125a261259d83612559565b612529565b82815260059290921b840181019181810190868411156125c157600080fd5b8286015b848110156125dc57803583529183019183016125c5565b509695505050505050565b600080600080600080600060e0888a03121561260257600080fd5b61260c88356124c5565b87359650602088013561261e816124c5565b955060408801359450612633606089016124f7565b93506080880135612643816124c5565b925060a08801356001600160401b038082111561265f57600080fd5b818a0191508a601f83011261267357600080fd5b813561268161259d82612559565b8082825260208201915060208360051b86010192508d8311156126a357600080fd5b602085015b838110156126dc5784813511156126be57600080fd5b6126ce8f6020833589010161257c565b8352602092830192016126a8565b509550505060c08a01359150808211156126f557600080fd5b506127028a828b0161257c565b91505092959891949750929550565b6000806040838503121561272457600080fd5b823561272f816124c5565b9150602083013561273f816124c5565b809150509250929050565b60008083601f84011261275c57600080fd5b5081356001600160401b0381111561277357600080fd5b6020830191508360208260051b850101111561228657600080fd5b6000806000604084860312156127a357600080fd5b83356001600160401b038111156127b957600080fd5b6127c58682870161274a565b909790965060209590950135949350505050565b6000806000604084860312156127ee57600080fd5b83356001600160401b0381111561280457600080fd5b6128108682870161274a565b9094509250506020840135612824816124c5565b809150509250925092565b600082601f83011261284057600080fd5b81356001600160401b0381111561285957612859612513565b61286c601f8201601f1916602001612529565b81815284602083860101111561288157600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126128af57600080fd5b813560206128bf61259d83612559565b82815260059290921b840181019181810190868411156128de57600080fd5b8286015b848110156125dc5780356128f5816124c5565b83529183019183016128e2565b80356001600160601b038116811461250e57600080fd5b600082601f83011261292a57600080fd5b8135602061293a61259d83612559565b82815260059290921b8401810191818101908684111561295957600080fd5b8286015b848110156125dc5761296e81612902565b835291830191830161295d565b600080600080600060a0868803121561299357600080fd5b853561299e816124c5565b94506020868101356001600160401b03808211156129bb57600080fd5b6129c78a838b0161257c565b965060408901359150808211156129dd57600080fd5b818901915089601f8301126129f157600080fd5b81356129ff61259d82612559565b81815260059190911b8301840190848101908c831115612a1e57600080fd5b8585015b83811015612a5657803585811115612a3a5760008081fd5b612a488f89838a010161282f565b845250918601918601612a22565b50975050506060890135925080831115612a6f57600080fd5b612a7b8a848b0161289e565b94506080890135925080831115612a9157600080fd5b5050612a9f88828901612919565b9150509295509295909350565b60008060008060008060808789031215612ac557600080fd5b8635612ad0816124c5565b955060208701356001600160401b0380821115612aec57600080fd5b612af88a838b0161274a565b90975095506040890135915080821115612b1157600080fd5b50612b1e89828a0161274a565b979a9699509497949695606090950135949350505050565b600060208284031215612b4857600080fd5b81356001600160401b03811115612b5e57600080fd5b612b6a8482850161282f565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015612bb35783516001600160a01b031683529284019291840191600101612b8e565b50909695505050505050565b60008060008060808587031215612bd557600080fd5b8435612be0816124c5565b93506020850135612bf0816124c5565b925060408501359150612c05606086016124f7565b905092959194509250565b602080825260059082015264435330303960d81b604082015260600190565b60208082526005908201526410d4cc0c0d60da1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160601b03808316818516808303821115612c9c57612c9c612c64565b01949350505050565b60006001600160601b0380831681811415612cc257612cc2612c64565b6001019392505050565b600060208284031215612cde57600080fd5b8151801515811461064d57600080fd5b602080825260059082015264435330303160d81b604082015260600190565b602080825260059082015264043533031360dc1b604082015260600190565b602080825260059082015264043533030360dc1b604082015260600190565b60208082526005908201526421a998181960d91b604082015260600190565b6000600019821415612d7e57612d7e612c64565b5060010190565b60008184825b85811015612dbc578135612d9e816124c5565b6001600160a01b031683526020928301929190910190600101612d8b565b509095945050505050565b60208082528181018390526000908460408401835b868110156125dc578235612def816124c5565b6001600160a01b031682529183019190830190600101612ddc565b6000823560de19833603018112612e2057600080fd5b9190910192915050565b6000808335601e19843603018112612e4157600080fd5b8301803591506001600160401b03821115612e5b57600080fd5b6020019150600581901b360382131561228657600080fd5b600060208284031215612e8557600080fd5b61064d826124f7565b600060208284031215612ea057600080fd5b61064d82612902565b6000808335601e19843603018112612ec057600080fd5b8301803591506001600160401b03821115612eda57600080fd5b60200191503681900382131561228657600080fd5b60208082526005908201526410d4cc0c4d60da1b604082015260600190565b600060ff821660ff84168060ff03821115612f2b57612f2b612c64565b019392505050565b600060ff821660ff811415612f4a57612f4a612c64565b60010192915050565b634e487b7160e01b600052601260045260246000fd5b600082612f7857612f78612f53565b500490565b600082612f8c57612f8c612f53565b500690565b6001600160a01b03898116825288811660208084019190915288821660408401526001600160601b0388811660608501528783166080850152861660a084015290841660c083015261010060e0830181905283519083018190526000918291905b8183101561301157858301810151858401610120015291820191612ff2565b508082111561302557600061012082860101525b601f01601f191692909201610120019a9950505050505050505050565b60008161305157613051612c64565b506000190190565b634e487b7160e01b600052602160045260246000fdfe92c0cd5d0d4f1126f4dc909af53875c49c1b71de9e8af67dd682f6f0990659cdd3eedd6d69d410e954f4c622838ecc3acae9fdcd83cad412075c85b092770656a2646970667358221220a94825ca6f46ead35778811912be01c8032ebd6d2257d4912853ed48e16da48264736f6c63430008090033454950373132446f6d61696e2875696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","deployedBytecode":"","abi":[{"inputs":[{"internalType":"address","name":"_allowanceAddress","type":"address"},{"internalType":"address","name":"_masterOperator","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"safeAddress","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"ApproverAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"safeAddress","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"ApproverRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"orgAddress","type":"address"}],"name":"OrgOffboarded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"orgAddress","type":"address"},{"indexed":true,"internalType":"address[]","name":"approvers","type":"address[]"},{"indexed":false,"internalType":"address[]","name":"approvers2","type":"address[]"}],"name":"OrgOnboarded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"NULL_BYTES","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SENTINEL_BYTES","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint64","name":"payoutNonce","type":"uint64"}],"name":"encodeTransactionData","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address payable","name":"to","type":"address"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint64","name":"payoutNonce","type":"uint64"},{"internalType":"address","name":"safeAddress","type":"address"},{"internalType":"bytes32[][]","name":"proof","type":"bytes32[][]"},{"internalType":"bytes32[]","name":"roots","type":"bytes32[]"}],"name":"executePayout","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint96","name":"amount","type":"uint96"},{"internalType":"uint64","name":"payoutNonce","type":"uint64"},{"internalType":"bytes32[]","name":"merkleRoots","type":"bytes32[]"},{"internalType":"bytes32[][]","name":"merkleProofs","type":"bytes32[][]"},{"internalType":"bytes[]","name":"rootSignatures","type":"bytes[]"}],"internalType":"struct Storage.Payout[]","name":"payouts","type":"tuple[]"},{"internalType":"address","name":"safeAddress","type":"address"}],"name":"executePayouts","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_safeAddress","type":"address"}],"name":"getApproverCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_safeAddress","type":"address"}],"name":"getApprovers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_safeAddress","type":"address"}],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_safeAddress","type":"address"},{"internalType":"address","name":"_addressToCheck","type":"address"}],"name":"isApprover","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_addressToCheck","type":"address"}],"name":"isOrgOnboarded","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_safeAddress","type":"address"},{"internalType":"address[]","name":"_addressesToAdd","type":"address[]"},{"internalType":"address[]","name":"_addressesToRemove","type":"address[]"},{"internalType":"uint256","name":"newThreshold","type":"uint256"}],"name":"modifyApprovers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"transactions","type":"bytes"}],"name":"multiSend","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_safeAddress","type":"address"}],"name":"offboard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_approvers","type":"address[]"},{"internalType":"uint256","name":"approvalsRequired","type":"uint256"}],"name":"onboard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tokensToFetch","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"safeAddress","type":"address"},{"internalType":"bytes32[]","name":"roots","type":"bytes32[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"},{"internalType":"address[]","name":"paymentTokens","type":"address[]"},{"internalType":"uint96[]","name":"payoutAmounts","type":"uint96[]"}],"name":"validatePayouts","outputs":[],"stateMutability":"nonpayable","type":"function"}]}