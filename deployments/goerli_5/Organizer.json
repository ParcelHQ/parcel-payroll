{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.9\"},\"sources\":{\"contracts/Organizer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./payroll/ApproverManager.sol\\\";\\nimport \\\"./payroll/PayrollManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Organizer - A utility smart contract for Orgss to define and manage their Organizational structure.\\n/// @author Sriram Kasyap Meduri - <sriram@parcel.money>\\n/// @author Krishna Kant Sharma - <krishna@parcel.money>\\n\\ncontract Organizer is ApproverManager, PayrollManager, Ownable {\\n    //  Events\\n    //  Org Onboarded\\n    event OrgOnboarded(\\n        address indexed orgAddress,\\n        address[] indexed approvers,\\n        address[] approvers2\\n    );\\n\\n    //  Org Offboarded\\n    event OrgOffboarded(address indexed orgAddress);\\n\\n    /**\\n     * @dev Constructor\\n     * @param _allowanceAddress - Address of the Allowance Module on current Network\\n     */\\n    constructor(address _allowanceAddress) Ownable() {\\n        ALLOWANCE_MODULE = _allowanceAddress;\\n    }\\n\\n    /**\\n     * @dev Onboard an Org with approvers\\n     * @param _approvers - Array of approver addresses\\n     * @param approvalsRequired - Number of approvals required for a payout to be executed\\n     */\\n    function onboard(\\n        address[] calldata _approvers,\\n        uint128 approvalsRequired\\n    ) external whenNotPaused {\\n        address safeAddress = msg.sender;\\n\\n        require(\\n            orgs[safeAddress].approverCount == 0,\\n            \\\"Organizer: Org already onboarded\\\"\\n        );\\n\\n        require(_approvers.length > 0, \\\"CS000\\\");\\n\\n        require(_approvers.length >= approvalsRequired, \\\"CS000\\\");\\n\\n        require(approvalsRequired != 0, \\\"CS004\\\");\\n\\n        address currentapprover = SENTINEL_ADDRESS;\\n\\n        orgs[safeAddress].approverCount = 0;\\n        orgs[safeAddress].approvalsRequired = approvalsRequired;\\n        orgs[safeAddress].packedPayoutNonces = new uint256[](5);\\n\\n        for (uint256 i = 0; i < _approvers.length; i++) {\\n            address approver = _approvers[i];\\n            require(\\n                // approver address cannot be null.\\n                approver != address(0) &&\\n                    // approver address cannot be SENTINEL.\\n                    approver != SENTINEL_ADDRESS &&\\n                    // approver address cannot be same as contract.\\n                    approver != address(this) &&\\n                    // approver address cannot be same as previous.\\n                    currentapprover != approver,\\n                \\\"CS001\\\"\\n            );\\n\\n            // No duplicate approvers allowed.\\n            require(\\n                orgs[safeAddress].approvers[approver] == address(0),\\n                \\\"CS002\\\"\\n            );\\n            orgs[safeAddress].approvers[currentapprover] = approver;\\n            currentapprover = approver;\\n\\n            emit ApproverAdded(safeAddress, approver);\\n\\n            orgs[safeAddress].approverCount++;\\n        }\\n        orgs[safeAddress].approvers[currentapprover] = SENTINEL_ADDRESS;\\n        emit OrgOnboarded(safeAddress, _approvers, _approvers);\\n    }\\n\\n    /**\\n     * @dev Offboard an Org, remove all approvers and delete the Org\\n   \\n     */\\n    function offboard() external {\\n        _onlyOnboarded(msg.sender);\\n\\n        // Remove all approvers in Orgs\\n        address currentapprover = orgs[msg.sender].approvers[SENTINEL_ADDRESS];\\n        while (currentapprover != SENTINEL_ADDRESS) {\\n            address nextapprover = orgs[msg.sender].approvers[currentapprover];\\n            delete orgs[msg.sender].approvers[currentapprover];\\n            currentapprover = nextapprover;\\n        }\\n\\n        delete orgs[msg.sender];\\n        emit OrgOffboarded(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Pause the contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Renounce ownership of the contract\\n     * @notice This function is overridden to prevent renouncing ownership\\n     */\\n    function renounceOwnership() public view override onlyOwner {\\n        revert(\\\"Ownable: cannot renounce ownership\\\");\\n    }\\n}\\n\",\"versionPragma\":\"0.8.9\"},\"contracts/payroll/Storage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title Storage for Organizer Contract\\n\\nabstract contract Storage {\\n    /**\\n     * @dev Struct for ORG\\n     * @param approverCount Number of approvers in the org\\n     * @param approvalsRequired Number of approvals required for a single payout\\n     * @param approvers Linked list of approvers\\n     * @param packedPayoutNonces Array of uint256, each uint256 represents 256 payout nonces\\n     * Each payout nonce is packed into a uint256, so the index of the uint256 in the array is the payout nonce / 256\\n     * The bit index of the uint256 is the payout nonce % 256\\n     * If the bit is set, the payout nonce has been used, if not, it has not been used\\n     */\\n    struct ORG {\\n        uint128 approverCount;\\n        uint128 approvalsRequired;\\n        mapping(address => address) approvers;\\n        uint256[] packedPayoutNonces;\\n    }\\n\\n    // Address of the Allowance Module\\n    address ALLOWANCE_MODULE;\\n\\n    //  Sentinels to use with linked lists\\n    address internal constant SENTINEL_ADDRESS = address(0x1);\\n\\n    /**\\n     * @dev Storage for Organisations\\n     * Mapping of org's safe address to ORG struct\\n     */\\n    mapping(address => ORG) public orgs;\\n\\n    /**\\n     * @dev Structure for Payouts\\n     */\\n    struct Payout {\\n        address to;\\n        address tokenAddress;\\n        uint128 amount;\\n        uint64 payoutNonce;\\n        bytes32[][] proof;\\n    }\\n}\\n\",\"versionPragma\":\"0.8.9\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/payroll/ApproverManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/// @title Approver Manager for Organizer Contract\\nabstract contract ApproverManager is Storage, Pausable {\\n    // Events\\n    event ApproverAdded(address indexed safeAddress, address indexed operator);\\n    event ApproverRemoved(\\n        address indexed safeAddress,\\n        address indexed operator\\n    );\\n\\n    event RemovedApprover(address approver, address safeAddress);\\n\\n    event ChangedThreshold(uint128 threshold, address safeAddress);\\n\\n    /// @dev Allows to add a new approver to the Safe and update the threshold at the same time.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Adds the approver `approver` to the Safe and updates the threshold to `threshold`.\\n    /// @param approver New approver address.\\n    /// @param threshold New threshold.\\n    function addApproverWithThreshold(\\n        address approver,\\n        uint128 threshold\\n    ) public whenNotPaused {\\n        _onlyOnboarded(msg.sender);\\n\\n        // Approver address cannot be null, the sentinel or the Safe itself.\\n        require(\\n            approver != address(0) &&\\n                approver != SENTINEL_ADDRESS &&\\n                approver != address(this),\\n            \\\"CS003\\\"\\n        );\\n        // No duplicate approvers allowed.\\n        require(orgs[msg.sender].approvers[approver] == address(0), \\\"CS002\\\");\\n\\n        orgs[msg.sender].approvers[approver] = orgs[msg.sender].approvers[\\n            SENTINEL_ADDRESS\\n        ];\\n        orgs[msg.sender].approvers[SENTINEL_ADDRESS] = approver;\\n        orgs[msg.sender].approverCount++;\\n\\n        emit ApproverAdded(msg.sender, approver);\\n        // Change threshold if threshold was changed.\\n        if (threshold != orgs[msg.sender].approvalsRequired)\\n            changeThreshold(threshold);\\n    }\\n\\n    /// @dev Allows to remove an approver from the Safe and update the threshold at the same time.\\n    ///      This can only be done via a Safe transaction.\\n    /// @notice Removes the approver `approver` from the Safe and updates the threshold to `threshold`.\\n    /// @param prevApprover Approver that pointed to the approver to be removed in the linked list\\n    /// @param approver Approver address to be removed.\\n    /// @param threshold New threshold.\\n    function removeApprover(\\n        address prevApprover,\\n        address approver,\\n        uint128 threshold\\n    ) public whenNotPaused {\\n        _onlyOnboarded(msg.sender);\\n\\n        // Only allow to remove an approver, if threshold can still be reached.\\n        require(orgs[msg.sender].approverCount - 1 >= threshold, \\\"CS016\\\");\\n        // Validate approver address and check that it corresponds to approver index.\\n        require(\\n            approver != address(0) && approver != SENTINEL_ADDRESS,\\n            \\\"CS003\\\"\\n        );\\n        require(orgs[msg.sender].approvers[prevApprover] == approver, \\\"CS017\\\");\\n\\n        orgs[msg.sender].approvers[prevApprover] = orgs[msg.sender].approvers[\\n            approver\\n        ];\\n        orgs[msg.sender].approvers[approver] = address(0);\\n        orgs[msg.sender].approverCount--;\\n        emit RemovedApprover(approver, msg.sender);\\n        // Change threshold if threshold was changed.\\n        if (threshold != orgs[msg.sender].approvalsRequired)\\n            changeThreshold(threshold);\\n    }\\n\\n    /// @dev Allows to swap/replace an approver with another address.\\n    ///      This can only be done via a Multisig transaction.\\n    /// @notice Replaces the approver `oldApprover` in the Safe with `newApprover`.\\n    /// @param prevApprover Approver that pointed to the approver to be replaced in the linked list\\n    /// @param oldApprover Approver address to be replaced.\\n    /// @param newApprover New approver address.\\n    function swapApprover(\\n        address prevApprover,\\n        address oldApprover,\\n        address newApprover\\n    ) public whenNotPaused {\\n        _onlyOnboarded(msg.sender);\\n\\n        // Approver address cannot be null, the sentinel or the Safe itself.\\n        require(\\n            newApprover != address(0) &&\\n                newApprover != SENTINEL_ADDRESS &&\\n                newApprover != address(this),\\n            \\\"CS003\\\"\\n        );\\n        // No duplicate approvers allowed.\\n        require(orgs[msg.sender].approvers[newApprover] == address(0), \\\"CS002\\\");\\n\\n        // Validate oldApprovers address and check that it corresponds to approver index.\\n        require(\\n            oldApprover != address(0) && oldApprover != SENTINEL_ADDRESS,\\n            \\\"CS003\\\"\\n        );\\n\\n        require(\\n            orgs[msg.sender].approvers[prevApprover] == oldApprover,\\n            \\\"CS017\\\"\\n        );\\n        orgs[msg.sender].approvers[newApprover] = orgs[msg.sender].approvers[\\n            oldApprover\\n        ];\\n        orgs[msg.sender].approvers[prevApprover] = newApprover;\\n        orgs[msg.sender].approvers[oldApprover] = address(0);\\n        emit RemovedApprover(oldApprover, msg.sender);\\n        emit ApproverAdded(msg.sender, newApprover);\\n    }\\n\\n    /// @dev Allows to update the number of required confirmations by Safe approvers.\\n    ///      This can only be done via a Multisig transaction.\\n    /// @notice Changes the approvals required to `_threshold`.\\n    /// @param threshold New threshold.\\n    function changeThreshold(uint128 threshold) public whenNotPaused {\\n        _onlyOnboarded(msg.sender);\\n\\n        // Validate that threshold is smaller than number of approvers.\\n        require(threshold <= orgs[msg.sender].approverCount, \\\"CS016\\\");\\n        // There has to be at least one Safe Approver.\\n        require(threshold >= 1, \\\"CS015\\\");\\n        orgs[msg.sender].approvalsRequired = threshold;\\n        emit ChangedThreshold(threshold, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Get list of approvers for Org\\n     * @param _safeAddress Address of the Org\\n     * @return Array of approvers\\n     */\\n    function getApprovers(\\n        address _safeAddress\\n    ) public view returns (address[] memory) {\\n        _onlyOnboarded(_safeAddress);\\n\\n        address[] memory array = new address[](\\n            orgs[_safeAddress].approverCount\\n        );\\n\\n        uint8 i = 0;\\n        address currentOp = orgs[_safeAddress].approvers[SENTINEL_ADDRESS];\\n        while (currentOp != SENTINEL_ADDRESS) {\\n            array[i] = currentOp;\\n            currentOp = orgs[_safeAddress].approvers[currentOp];\\n            i++;\\n        }\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Get count of approvers for Org\\n     * @param _safeAddress Address of the Org\\n     * @return Count of approvers\\n     */\\n    function getApproverCount(\\n        address _safeAddress\\n    ) external view returns (uint256) {\\n        _onlyOnboarded(_safeAddress);\\n        return orgs[_safeAddress].approverCount;\\n    }\\n\\n    /**\\n     * @dev Get required Threshold for Org\\n     * @param _safeAddress Address of the Org\\n     * @return Threshold Count\\n     */\\n    function getThreshold(\\n        address _safeAddress\\n    ) external view returns (uint256) {\\n        _onlyOnboarded(_safeAddress);\\n        return orgs[_safeAddress].approvalsRequired;\\n    }\\n\\n    function _onlyOnboarded(address _safeAddress) internal view {\\n        require(orgs[_safeAddress].approverCount != 0, \\\"CS009\\\");\\n    }\\n}\\n\",\"versionPragma\":\"0.8.9\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/signature/Signature.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract Signature {\\n    using ECDSA for bytes32;\\n\\n    // Domain Typehash\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\")\\n        );\\n\\n    // Message Typehash\\n    bytes32 internal constant PAYROLL_TX_TYPEHASH =\\n        keccak256(bytes(\\\"PayrollTx(bytes32 rootHash)\\\"));\\n\\n    function getChainId() internal view returns (uint256 chainId) {\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev get the domain seperator\\n     */\\n    function getDomainSeperator() internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(EIP712_DOMAIN_TYPEHASH, getChainId(), address(this))\\n            );\\n    }\\n\\n    /**\\n     * @dev validate the signature of the payroll transaction\\n     * @param rootHash hash = encodeTransactionData(recipient, tokenAddress, amount, nonce)\\n     * @param signature signature\\n     */\\n    function validatePayrollTxHashes(\\n        bytes32 rootHash,\\n        bytes memory signature\\n    ) internal view returns (address) {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeperator(),\\n                keccak256(abi.encode(PAYROLL_TX_TYPEHASH, rootHash))\\n            )\\n        );\\n\\n        return digest.recover(signature);\\n    }\\n}\\n\",\"versionPragma\":\"0.8.9\"},\"contracts/interfaces/AllowanceModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface AllowanceModule {\\n    function executeAllowanceTransfer(\\n        address safe,\\n        address token,\\n        address payable to,\\n        uint96 amount,\\n        address paymentToken,\\n        uint96 payment,\\n        address delegate,\\n        bytes memory signature\\n    ) external;\\n}\\n\",\"versionPragma\":\"0.8.9\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.1\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/payroll/PayrollManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n// Module Imports\\nimport \\\"../signature/Signature.sol\\\";\\nimport \\\"../interfaces/AllowanceModule.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\ncontract PayrollManager is Storage, Signature, ReentrancyGuard, Pausable {\\n    // Payroll Functions\\n\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Set usage status of a payout nonce\\n     * @param safeAddress  Address of the safe\\n     * @param payoutNonce Payout nonce to set\\n     */\\n    function packPayoutNonce(\\n        address safeAddress,\\n        uint256 payoutNonce\\n    ) internal {\\n        // Packed payout nonces are stored in an array of uint256\\n        // Each uint256 represents 256 payout nonces\\n\\n        // Each payout nonce is packed into a uint256, so the index of the uint256 in the array is the payout nonce / 256\\n        uint256 slot = payoutNonce / 256;\\n\\n        // The bit index of the uint256 is the payout nonce % 256 (0-255)\\n        uint256 bitIndex = payoutNonce % 256;\\n\\n        // If the bit is set, the payout nonce has been used, if not, it has not been used\\n        if (slot >= orgs[safeAddress].packedPayoutNonces.length) {\\n            // If the slot is greater than the length of the array, we need to push new uint256s to the array\\n            // We need to push enough uint256s to the array so that the slot is the last index of the array\\n            while (orgs[safeAddress].packedPayoutNonces.length != slot) {\\n                orgs[safeAddress].packedPayoutNonces.push(0);\\n            }\\n        }\\n\\n        // Set the bit to 1\\n        // This means that the payout nonce has been used\\n        orgs[safeAddress].packedPayoutNonces[slot] |= 1 << bitIndex;\\n    }\\n\\n    /**\\n     * @dev Get usage status of a payout nonce\\n     * @param safeAddress  Address of the safe\\n     * @param payoutNonce Payout nonce to check\\n     * @return Boolean, true for used, false for unused\\n     */\\n    function getPayoutNonce(\\n        address safeAddress,\\n        uint256 payoutNonce\\n    ) internal view returns (bool) {\\n        // Each payout nonce is packed into a uint256, so the index of the uint256 in the array is the payout nonce / 256\\n        uint256 slotIndex = payoutNonce / 256;\\n\\n        // The bit index of the uint256 is the payout nonce % 256 (0-255)\\n        uint256 bitIndex = payoutNonce % 256;\\n\\n        //  If the slot is greater than the length of the array, the payout nonce has not been used\\n        if (\\n            orgs[safeAddress].packedPayoutNonces.length == 0 ||\\n            orgs[safeAddress].packedPayoutNonces.length <= slotIndex\\n        ) {\\n            return false;\\n        } else {\\n            // If the bit is set, the payout nonce has been used, if not, it has not been used\\n            return\\n                (orgs[safeAddress].packedPayoutNonces[slotIndex] &\\n                    (1 << bitIndex)) != 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Encode the transaction data for the payroll payout\\n     * @param to Address to send the funds to\\n     * @param tokenAddress Address of the token to send\\n     * @param amount Amount of tokens to send\\n     * @param payoutNonce Payout nonce to use\\n     * @return encodedHash Encoded hash of the transaction data\\n     */\\n    function encodeTransactionData(\\n        address to,\\n        address tokenAddress,\\n        uint256 amount,\\n        uint64 payoutNonce\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(to, tokenAddress, amount, payoutNonce));\\n    }\\n\\n    /**\\n     * @dev This function validates the signature and verifies if signatures are unique and the approver belongs to safe\\n     * @param safeAddress Address to send the funds to\\n     * @param roots Address of the token to send\\n     * @param signatures Amount of tokens to send\\n     */\\n    function validateSignatures(\\n        address safeAddress,\\n        bytes32[] memory roots,\\n        bytes[] memory signatures\\n    ) internal view {\\n        // Validate the roots via approver signatures\\n        address currentApprover;\\n        for (uint256 i = 0; i < roots.length; i++) {\\n            // Recover signer from the signature\\n            address signer = validatePayrollTxHashes(roots[i], signatures[i]);\\n            // Check if the signer is an approver & is different from the current approver\\n            require(\\n                signer != SENTINEL_ADDRESS &&\\n                    orgs[safeAddress].approvers[signer] != address(0) &&\\n                    signer > currentApprover,\\n                \\\"CS014\\\"\\n            );\\n            // Set the current approver to the signer\\n            currentApprover = signer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Validate the payroll transaction hashes and execute the payroll\\n     * @param safeAddress Address of the safe\\n     * @param payouts Array of Payouts\\n     * @param roots Merkle roots of the payroll transaction hashes\\n     * @param signatures Signatures of the payroll transaction hashes\\n     * @param paymentTokens Addresses of all the tokens to send in the payroll\\n     * @param payoutAmounts Total Amounts of respective tokens to send in the payroll\\n     */\\n    function executePayroll(\\n        address safeAddress,\\n        Payout[] calldata payouts,\\n        bytes32[] calldata roots,\\n        bytes[] calldata signatures,\\n        address[] calldata paymentTokens,\\n        uint96[] memory payoutAmounts\\n    ) external nonReentrant whenNotPaused {\\n        // check if safe is onboarded\\n        require(orgs[safeAddress].approverCount != 0, \\\"CS009\\\");\\n\\n        // Validate the Input Data\\n        // require(to.length == tokenAddress.length, \\\"CS004\\\");\\n        // require(to.length == amount.length, \\\"CS004\\\");\\n        // require(to.length == payoutNonce.length, \\\"CS004\\\");\\n        require(roots.length == signatures.length, \\\"CS004\\\");\\n        require(paymentTokens.length == payoutAmounts.length, \\\"CS004\\\");\\n\\n        validateSignatures(safeAddress, roots, signatures);\\n\\n        {\\n            // Fetch the required tokens from the safe via Allowance module\\n            for (uint256 index = 0; index < paymentTokens.length; index++) {\\n                execTransactionFromGnosis(\\n                    safeAddress,\\n                    paymentTokens[index],\\n                    payoutAmounts[index]\\n                );\\n            }\\n        }\\n\\n        // create a new array to store initial balances of  payment tokens\\n        uint256[] memory initialBalances = new uint256[](paymentTokens.length);\\n\\n        for (uint256 i = 0; i < paymentTokens.length; i++) {\\n            if (paymentTokens[i] == address(0)) {\\n                initialBalances[i] = address(this).balance;\\n            } else {\\n                initialBalances[i] = IERC20(paymentTokens[i]).balanceOf(\\n                    address(this)\\n                );\\n            }\\n        }\\n\\n        // Loop through the payouts\\n        for (uint256 i = 0; i < payouts.length; i++) {\\n            // Generate the leaf from the payout data\\n            bytes32 leaf = encodeTransactionData(\\n                payouts[i].to,\\n                payouts[i].tokenAddress,\\n                payouts[i].amount,\\n                payouts[i].payoutNonce\\n            );\\n\\n            // Initialize the approvals counter\\n            uint256 approvals;\\n\\n            // Loop through the roots\\n            for (uint256 j = 0; j < roots.length; j++) {\\n                // Verify the root has been validated\\n                // Verify the proof against the current root and increment the approvals counter\\n                if (MerkleProof.verify(payouts[i].proof[j], roots[j], leaf)) {\\n                    ++approvals;\\n                }\\n            }\\n\\n            // Check if the approvals are greater than or equal to the required approvals\\n            if (\\n                approvals >= orgs[safeAddress].approvalsRequired &&\\n                (orgs[safeAddress].packedPayoutNonces.length == 0 ||\\n                    !getPayoutNonce(safeAddress, payouts[i].payoutNonce))\\n            ) {\\n                // Transfer the funds to the recipient (to) addresses\\n                if (payouts[i].tokenAddress == address(0)) {\\n                    packPayoutNonce(safeAddress, payouts[i].payoutNonce);\\n                    // Transfer ether\\n                    (bool sent, bytes memory data) = payouts[i].to.call{\\n                        value: payouts[i].amount\\n                    }(\\\"\\\");\\n\\n                    require(sent, \\\"CS007\\\");\\n                } else {\\n                    packPayoutNonce(safeAddress, payouts[i].payoutNonce);\\n                    // Transfer ERC20 tokens\\n                    IERC20(payouts[i].tokenAddress).safeTransfer(\\n                        payouts[i].to,\\n                        payouts[i].amount\\n                    );\\n                }\\n            }\\n        }\\n\\n        // Check if the contract has any tokens left\\n        for (uint256 i = 0; i < paymentTokens.length; i++) {\\n            if (paymentTokens[i] == address(0)) {\\n                // Revert if the contract has any ether left\\n                require(address(this).balance == initialBalances[i], \\\"CS018\\\");\\n            } else if (\\n                IERC20(paymentTokens[i]).balanceOf(address(this)) >\\n                initialBalances[i]\\n            ) {\\n                // Revert if the contract has any tokens left\\n                revert(\\\"CS018\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Receive Ether\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Execute transaction from Gnosis Safe\\n     * @param safeAddress Address of the Gnosis Safe\\n     * @param tokenAddress Address of the token to send\\n     * @param amount Amount of tokens to send\\n     */\\n    function execTransactionFromGnosis(\\n        address safeAddress,\\n        address tokenAddress,\\n        uint96 amount\\n    ) internal {\\n        // Execute payout via allowance module\\n        AllowanceModule(ALLOWANCE_MODULE).executeAllowanceTransfer(\\n            safeAddress,\\n            tokenAddress,\\n            payable(address(this)),\\n            amount,\\n            0x0000000000000000000000000000000000000000,\\n            0,\\n            address(this),\\n            bytes(\\\"\\\")\\n        );\\n    }\\n}\\n\",\"versionPragma\":\"0.8.9\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x8ca5a5931c9998a90120476f59B0Ce6d8877bfc5","bytecode":"0x60806040523480156200001157600080fd5b5060405162003260380380620032608339810160408190526200003491620000ce565b60016002556003805460ff191690556200004e3362000074565b600080546001600160a01b0319166001600160a01b039290921691909117905562000100565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208284031215620000e157600080fd5b81516001600160a01b0381168114620000f957600080fd5b9392505050565b61315080620001106000396000f3fe6080604052600436106100ed5760003560e01c80638456cb59116100855780638456cb59146102515780638da5cb5b146102665780639146a775146102915780639e3e493e146102be578063aa0690f8146102de578063e02cab18146102fe578063e37bd0a11461031e578063e3f1b42e1461033e578063f2fde38b1461035e57600080fd5b8063126e704e146100f95780633294a44f1461011b578063361472c3146101305780633bf479ff146101505780633f4ba83a146101b6578063523e99ae146101cb5780635c975abb146101f9578063715018a61461021c578063789771681461023157600080fd5b366100f457005b600080fd5b34801561010557600080fd5b50610119610114366004612777565b61037e565b005b34801561012757600080fd5b5061011961057e565b34801561013c57600080fd5b5061011961014b3660046128e8565b61064b565b34801561015c57600080fd5b5061019161016b3660046129df565b6001602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152015b60405180910390f35b3480156101c257600080fd5b50610119610f77565b3480156101d757600080fd5b506101eb6101e63660046129df565b610f89565b6040519081526020016101ad565b34801561020557600080fd5b5060035460ff1660405190151581526020016101ad565b34801561022857600080fd5b50610119610fb9565b34801561023d57600080fd5b506101eb61024c3660046129df565b611014565b34801561025d57600080fd5b5061011961104b565b34801561027257600080fd5b5060035461010090046001600160a01b03166040516101ad91906129fa565b34801561029d57600080fd5b506102b16102ac3660046129df565b61105b565b6040516101ad9190612a0e565b3480156102ca57600080fd5b506101196102d9366004612a72565b611174565b3480156102ea57600080fd5b506101196102f9366004612abc565b611528565b34801561030a57600080fd5b50610119610319366004612aef565b6116c4565b34801561032a57600080fd5b50610119610339366004612b29565b6118b3565b34801561034a57600080fd5b506101eb610359366004612b5b565b6119ab565b34801561036a57600080fd5b506101196103793660046129df565b611a05565b610386611a7e565b61038f33611ac4565b6001600160a01b038116158015906103b157506001600160a01b038116600114155b80156103c657506001600160a01b0381163014155b6103eb5760405162461bcd60e51b81526004016103e290612ba8565b60405180910390fd5b3360009081526001602081815260408084206001600160a01b03868116865293019091529091205416156104315760405162461bcd60e51b81526004016103e290612bc7565b6001600160a01b0382161580159061045357506001600160a01b038216600114155b61046f5760405162461bcd60e51b81526004016103e290612ba8565b3360009081526001602081815260408084206001600160a01b0388811686529301909152909120548116908316146104b95760405162461bcd60e51b81526004016103e290612be6565b3360008181526001602081815260408084206001600160a01b03888116808752919094018352818520805488861680885284882080549288166001600160a01b0319938416179055958b1687528387208054821690961790955594819052845490931690935582519182528101929092527f21108c84990d72cc717433752110f9dc2c776eabbd861cca48434c44ad42e9a9910160405180910390a16040516001600160a01b0382169033906000805160206130fb83398151915290600090a3505050565b61058733611ac4565b33600090815260016020818152604080842083855290920190529020546001600160a01b03165b6001600160a01b0381166001146105fb573360009081526001602081815260408084206001600160a01b0395861685529092019052902080546001600160a01b03198116909155166105ae565b3360009081526001602052604081208181559061061b60028301826126dd565b505060405133907ffad79252f2a35a653f254aabf7b02e141c2ba535f23ae9e18add88e96d11597290600090a250565b610653611b02565b61065b611a7e565b6001600160a01b038a166000908152600160205260409020546001600160801b03166106995760405162461bcd60e51b81526004016103e290612c05565b8584146106b85760405162461bcd60e51b81526004016103e290612c24565b805182146106d85760405162461bcd60e51b81526004016103e290612c24565b6107218a88888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061071c92508991508a9050612c43565b611b5a565b60005b82811015610788576107768b85858481811061074257610742612d0d565b905060200201602081019061075791906129df565b84848151811061076957610769612d0d565b6020026020010151611c55565b8061078081612d39565b915050610724565b506000826001600160401b038111156107a3576107a36127fe565b6040519080825280602002602001820160405280156107cc578160200160208202803683370190505b50905060005b838110156109095760008585838181106107ee576107ee612d0d565b905060200201602081019061080391906129df565b6001600160a01b03161415610836574782828151811061082557610825612d0d565b6020026020010181815250506108f7565b84848281811061084857610848612d0d565b905060200201602081019061085d91906129df565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161088891906129fa565b60206040518083038186803b1580156108a057600080fd5b505afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190612d54565b8282815181106108ea576108ea612d0d565b6020026020010181815250505b8061090181612d39565b9150506107d2565b5060005b89811015610df25760006109f48c8c8481811061092c5761092c612d0d565b905060200281019061093e9190612d6d565b61094c9060208101906129df565b8d8d8581811061095e5761095e612d0d565b90506020028101906109709190612d6d565b6109819060408101906020016129df565b8e8e8681811061099357610993612d0d565b90506020028101906109a59190612d6d565b6109b6906060810190604001612b29565b6001600160801b03168f8f878181106109d1576109d1612d0d565b90506020028101906109e39190612d6d565b610359906080810190606001612d8d565b90506000805b8a811015610adb57610ab88e8e86818110610a1757610a17612d0d565b9050602002810190610a299190612d6d565b610a37906080810190612da8565b83818110610a4757610a47612d0d565b9050602002810190610a599190612da8565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d8d84818110610aab57610aab612d0d565b9050602002013585611cd4565b15610ac957610ac682612d39565b91505b80610ad381612d39565b9150506109fa565b506001600160a01b038e16600090815260016020526040902054600160801b90046001600160801b03168110801590610b7b57506001600160a01b038e166000908152600160205260409020600201541580610b7b5750610b798e8e8e86818110610b4857610b48612d0d565b9050602002810190610b5a9190612d6d565b610b6b906080810190606001612d8d565b6001600160401b0316611cea565b155b15610ddd5760008d8d85818110610b9457610b94612d0d565b9050602002810190610ba69190612d6d565b610bb79060408101906020016129df565b6001600160a01b03161415610d0f57610c0d8e8e8e86818110610bdc57610bdc612d0d565b9050602002810190610bee9190612d6d565b610bff906080810190606001612d8d565b6001600160401b0316611dae565b6000808e8e86818110610c2257610c22612d0d565b9050602002810190610c349190612d6d565b610c429060208101906129df565b6001600160a01b03168f8f87818110610c5d57610c5d612d0d565b9050602002810190610c6f9190612d6d565b610c80906060810190604001612b29565b6001600160801b031660405160006040518083038185875af1925050503d8060008114610cc9576040519150601f19603f3d011682016040523d82523d6000602084013e610cce565b606091505b509150915081610d085760405162461bcd60e51b8152602060048201526005602482015264435330303760d81b60448201526064016103e2565b5050610ddd565b610d258e8e8e86818110610bdc57610bdc612d0d565b610ddd8d8d85818110610d3a57610d3a612d0d565b9050602002810190610d4c9190612d6d565b610d5a9060208101906129df565b8e8e86818110610d6c57610d6c612d0d565b9050602002810190610d7e9190612d6d565b610d8f906060810190604001612b29565b6001600160801b03168f8f87818110610daa57610daa612d0d565b9050602002810190610dbc9190612d6d565b610dcd9060408101906020016129df565b6001600160a01b03169190611e8f565b50508080610dea90612d39565b91505061090d565b5060005b83811015610f5f576000858583818110610e1257610e12612d0d565b9050602002016020810190610e2791906129df565b6001600160a01b03161415610e7357818181518110610e4857610e48612d0d565b60200260200101514714610e6e5760405162461bcd60e51b81526004016103e290612df1565b610f4d565b818181518110610e8557610e85612d0d565b6020026020010151858583818110610e9f57610e9f612d0d565b9050602002016020810190610eb491906129df565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610edf91906129fa565b60206040518083038186803b158015610ef757600080fd5b505afa158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190612d54565b1115610f4d5760405162461bcd60e51b81526004016103e290612df1565b80610f5781612d39565b915050610df6565b5050610f6b6001600255565b50505050505050505050565b610f7f611ee1565b610f87611f41565b565b6000610f9482611ac4565b506001600160a01b03166000908152600160205260409020546001600160801b031690565b610fc1611ee1565b60405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616e6e6f742072656e6f756e6365206f776e65727368604482015261069760f41b60648201526084016103e2565b600061101f82611ac4565b506001600160a01b0316600090815260016020526040902054600160801b90046001600160801b031690565b611053611ee1565b610f87611f8d565b606061106682611ac4565b6001600160a01b0382166000908152600160205260408120546001600160801b03166001600160401b0381111561109f5761109f6127fe565b6040519080825280602002602001820160405280156110c8578160200160208202803683370190505b506001600160a01b038085166000908152600160208181526040808420838552909201905281205492935091165b6001600160a01b03811660011461116b5780838360ff168151811061111d5761111d612d0d565b6001600160a01b03928316602091820292909201810191909152868216600090815260018083526040808320958516835294019091529190912054168161116381612e10565b9250506110f6565b50909392505050565b61117c611a7e565b336000818152600160205260409020546001600160801b0316156111e25760405162461bcd60e51b815260206004820181905260248201527f4f7267616e697a65723a204f726720616c7265616479206f6e626f617264656460448201526064016103e2565b826111ff5760405162461bcd60e51b81526004016103e290612e30565b6001600160801b0382168310156112285760405162461bcd60e51b81526004016103e290612e30565b6001600160801b03821661124e5760405162461bcd60e51b81526004016103e290612c24565b6001600160a01b0381166000908152600160208181526040928390206001600160801b038616600160801b0290558251600580825260c08201909452919290820160a0803683375050506001600160a01b038316600090815260016020908152604090912082516112c99360029092019291909101906126fb565b5060005b8481101561148c5760008686838181106112e9576112e9612d0d565b90506020020160208101906112fe91906129df565b90506001600160a01b0381161580159061132257506001600160a01b038116600114155b801561133757506001600160a01b0381163014155b80156113555750806001600160a01b0316836001600160a01b031614155b6113895760405162461bcd60e51b8152602060048201526005602482015264435330303160d81b60448201526064016103e2565b6001600160a01b0384811660009081526001602081815260408084208686168552909201905290205416156113d05760405162461bcd60e51b81526004016103e290612bc7565b6001600160a01b038481166000818152600160208181526040808420988616845297909101905285812080546001600160a01b03191693851693841790559451929485936000805160206130fb8339815191529190a36001600160a01b038416600090815260016020526040812080546001600160801b03169161145383612e4f565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050808061148490612d39565b9150506112cd565b506001600160a01b038083166000908152600160208181526040808420948616845293820190529082902080546001600160a01b0319169091179055516114d69086908690612e76565b6040518091039020826001600160a01b03167fcc78a51061ab3534a9c926383d2e9693d6e839e84b27cdcbfbe9784c2beb4a948787604051611519929190612eb6565b60405180910390a35050505050565b611530611a7e565b61153933611ac4565b6001600160a01b0382161580159061155b57506001600160a01b038216600114155b801561157057506001600160a01b0382163014155b61158c5760405162461bcd60e51b81526004016103e290612ba8565b3360009081526001602081815260408084206001600160a01b03878116865293019091529091205416156115d25760405162461bcd60e51b81526004016103e290612bc7565b336000818152600160208181526040808420838552808401835281852080546001600160a01b038a81168089529488208054919092166001600160a01b0319918216179091558154169092179091559383525281546001600160801b0316919061163b83612e4f565b91906101000a8154816001600160801b0302191690836001600160801b0316021790555050816001600160a01b0316336001600160a01b03166000805160206130fb83398151915260405160405180910390a3336000908152600160205260409020546001600160801b03828116600160801b90920416146116c0576116c0816118b3565b5050565b6116cc611a7e565b6116d533611ac4565b336000908152600160208190526040909120546001600160801b038084169261170092909116612ef7565b6001600160801b031610156117275760405162461bcd60e51b81526004016103e290612f1f565b6001600160a01b0382161580159061174957506001600160a01b038216600114155b6117655760405162461bcd60e51b81526004016103e290612ba8565b3360009081526001602081815260408084206001600160a01b0388811686529301909152909120548116908316146117af5760405162461bcd60e51b81526004016103e290612be6565b3360008181526001602081815260408084206001600160a01b038881168652818501845282862080548b831688529387208054949092166001600160a01b03199485161790915580549092169091559383525281546001600160801b0316919061181883612f3e565b82546001600160801b039182166101009390930a928302919092021990911617905550604080516001600160a01b03841681523360208201527f21108c84990d72cc717433752110f9dc2c776eabbd861cca48434c44ad42e9a9910160405180910390a1336000908152600160205260409020546001600160801b03828116600160801b90920416146118ae576118ae816118b3565b505050565b6118bb611a7e565b6118c433611ac4565b336000908152600160205260409020546001600160801b0390811690821611156119005760405162461bcd60e51b81526004016103e290612f1f565b6001816001600160801b031610156119425760405162461bcd60e51b8152602060048201526005602482015264435330313560d81b60448201526064016103e2565b3360008181526001602090815260409182902080546001600160801b03908116600160801b918716918202179091558251908152908101929092527fd6c6a426185f23acffb7dba7a1fb29112e6b695b6f79c7278cf7920af8028b2d910160405180910390a150565b604080516001600160a01b038087166020830152851691810191909152606081018390526001600160401b038216608082015260009060a0016040516020818303038152906040528051906020012090505b949350505050565b611a0d611ee1565b6001600160a01b038116611a725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e2565b611a7b81611fca565b50565b60035460ff1615610f875760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103e2565b6001600160a01b0381166000908152600160205260409020546001600160801b0316611a7b5760405162461bcd60e51b81526004016103e290612c05565b600280541415611b545760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103e2565b60028055565b6000805b8351811015611c4e576000611ba5858381518110611b7e57611b7e612d0d565b6020026020010151858481518110611b9857611b98612d0d565b6020026020010151612024565b90506001600160a01b038116600114801590611be957506001600160a01b038681166000908152600160208181526040808420868616855290920190529020541615155b8015611c065750826001600160a01b0316816001600160a01b0316115b611c3a5760405162461bcd60e51b815260206004820152600560248201526410d4cc0c4d60da1b60448201526064016103e2565b915080611c4681612d39565b915050611b5e565b5050505050565b6000805460408051602081018252838152905163228ab20d60e11b81526001600160a01b0390921692634515641a92611c9d9288928892309289929182918591600401612fbd565b600060405180830381600087803b158015611cb757600080fd5b505af1158015611ccb573d6000803e3d6000fd5b50505050505050565b600082611ce185846120fd565b14949350505050565b600080611cf96101008461303e565b90506000611d0961010085613052565b6001600160a01b0386166000908152600160205260409020600201549091501580611d4f57506001600160a01b0385166000908152600160205260409020600201548210155b15611d5f57600092505050611da8565b6001600160a01b0385166000908152600160208190526040909120600201805491831b9184908110611d9357611d93612d0d565b90600052602060002001541660001415925050505b92915050565b6000611dbc6101008361303e565b90506000611dcc61010084613052565b6001600160a01b0385166000908152600160205260409020600201549091508210611e43575b6001600160a01b0384166000908152600160205260409020600201548214611e43576001600160a01b0384166000908152600160208181526040832060020180549283018155835282200155611df2565b6001600160a01b0384166000908152600160208190526040909120600201805491831b9184908110611e7757611e77612d0d565b60009182526020909120018054909117905550505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526118ae90849061214a565b6003546001600160a01b03610100909104163314610f875760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e2565b611f4961221c565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611f8391906129fa565b60405180910390a1565b611f95611a7e565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f763390565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008061202f612265565b604080518082018252601b81527f506179726f6c6c5478286279746573333220726f6f7448617368290000000000602091820152905161209c917f8fba187ae9ab8a9763f7172f9bfd506ee0dfef805deabfbabbb76e3a3c44804d91889101918252602082015260400190565b604051602081830303815290604052805190602001206040516020016120d992919061190160f01b81526002810192909252602282015260420190565b60408051601f19818403018152919052805160209091012090506119fd81846122c1565b600081815b84518110156121425761212e8286838151811061212157612121612d0d565b60200260200101516122dd565b91508061213a81612d39565b915050612102565b509392505050565b600061219f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661230f9092919063ffffffff16565b8051909150156118ae57808060200190518101906121bd9190613066565b6118ae5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e2565b60035460ff16610f875760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103e2565b60006040518060600160405280603781526020016130c4603791398051906020012061228e4690565b60408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b60008060006122d0858561231e565b9150915061214281612364565b60008183106122f9576000828152602084905260409020612308565b60008381526020839052604090205b9392505050565b60606119fd84846000856124ad565b6000808251604114156123555760208301516040840151606085015160001a61234987828585612588565b9450945050505061235d565b506000905060025b9250929050565b600081600481111561237857612378613088565b14156123815750565b600181600481111561239557612395613088565b14156123de5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016103e2565b60028160048111156123f2576123f2613088565b14156124405760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103e2565b600381600481111561245457612454613088565b1415611a7b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103e2565b60608247101561250e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103e2565b600080866001600160a01b0316858760405161252a919061309e565b60006040518083038185875af1925050503d8060008114612567576040519150601f19603f3d011682016040523d82523d6000602084013e61256c565b606091505b509150915061257d87838387612642565b979650505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156125b55750600090506003612639565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612609573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661263257600060019250925050612639565b9150600090505b94509492505050565b606083156126ae5782516126a7576001600160a01b0385163b6126a75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e2565b50816119fd565b6119fd83838151156126c35781518083602001fd5b8060405162461bcd60e51b81526004016103e291906130b0565b5080546000825590600052602060002090810190611a7b9190612746565b828054828255906000526020600020908101928215612736579160200282015b8281111561273657825182559160200191906001019061271b565b50612742929150612746565b5090565b5b808211156127425760008155600101612747565b80356001600160a01b038116811461277257600080fd5b919050565b60008060006060848603121561278c57600080fd5b6127958461275b565b92506127a36020850161275b565b91506127b16040850161275b565b90509250925092565b60008083601f8401126127cc57600080fd5b5081356001600160401b038111156127e357600080fd5b6020830191508360208260051b850101111561235d57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561283c5761283c6127fe565b604052919050565b60006001600160401b0382111561285d5761285d6127fe565b5060051b60200190565b600082601f83011261287857600080fd5b8135602061288d61288883612844565b612814565b82815260059290921b840181019181810190868411156128ac57600080fd5b8286015b848110156128dd5780356001600160601b03811681146128d05760008081fd5b83529183019183016128b0565b509695505050505050565b60008060008060008060008060008060c08b8d03121561290757600080fd5b6129108b61275b565b995060208b01356001600160401b038082111561292c57600080fd5b6129388e838f016127ba565b909b50995060408d013591508082111561295157600080fd5b61295d8e838f016127ba565b909950975060608d013591508082111561297657600080fd5b6129828e838f016127ba565b909750955060808d013591508082111561299b57600080fd5b6129a78e838f016127ba565b909550935060a08d01359150808211156129c057600080fd5b506129cd8d828e01612867565b9150509295989b9194979a5092959850565b6000602082840312156129f157600080fd5b6123088261275b565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015612a4f5783516001600160a01b031683529284019291840191600101612a2a565b50909695505050505050565b80356001600160801b038116811461277257600080fd5b600080600060408486031215612a8757600080fd5b83356001600160401b03811115612a9d57600080fd5b612aa9868287016127ba565b90945092506127b1905060208501612a5b565b60008060408385031215612acf57600080fd5b612ad88361275b565b9150612ae660208401612a5b565b90509250929050565b600080600060608486031215612b0457600080fd5b612b0d8461275b565b9250612b1b6020850161275b565b91506127b160408501612a5b565b600060208284031215612b3b57600080fd5b61230882612a5b565b80356001600160401b038116811461277257600080fd5b60008060008060808587031215612b7157600080fd5b612b7a8561275b565b9350612b886020860161275b565b925060408501359150612b9d60608601612b44565b905092959194509250565b602080825260059082015264435330303360d81b604082015260600190565b60208082526005908201526421a998181960d91b604082015260600190565b602080825260059082015264435330313760d81b604082015260600190565b602080825260059082015264435330303960d81b604082015260600190565b60208082526005908201526410d4cc0c0d60da1b604082015260600190565b6000612c5161288884612844565b80848252602080830192508560051b850136811115612c6f57600080fd5b855b81811015612d015780356001600160401b0380821115612c915760008081fd5b90880190601f3681840112612ca65760008081fd5b823582811115612cb857612cb86127fe565b612cc9818301601f19168801612814565b92508083523687828601011115612ce257600091508182fd5b8087850188850137600090830187015250865250938201938201612c71565b50919695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d4d57612d4d612d23565b5060010190565b600060208284031215612d6657600080fd5b5051919050565b60008235609e19833603018112612d8357600080fd5b9190910192915050565b600060208284031215612d9f57600080fd5b61230882612b44565b6000808335601e19843603018112612dbf57600080fd5b8301803591506001600160401b03821115612dd957600080fd5b6020019150600581901b360382131561235d57600080fd5b602080825260059082015264086a66062760db1b604082015260600190565b600060ff821660ff811415612e2757612e27612d23565b60010192915050565b602080825260059082015264043533030360dc1b604082015260600190565b60006001600160801b0382811680821415612e6c57612e6c612d23565b6001019392505050565b60008184825b85811015612eab576001600160a01b03612e958361275b565b1683526020928301929190910190600101612e7c565b509095945050505050565b60208082528181018390526000908460408401835b868110156128dd576001600160a01b03612ee48461275b565b1682529183019190830190600101612ecb565b60006001600160801b0383811690831681811015612f1757612f17612d23565b039392505050565b60208082526005908201526421a998189b60d91b604082015260600190565b60006001600160801b03821680612f5757612f57612d23565b6000190192915050565b60005b83811015612f7c578181015183820152602001612f64565b83811115612f8b576000848401525b50505050565b60008151808452612fa9816020860160208601612f61565b601f01601f19169290920160200192915050565b6001600160a01b038981168252888116602083015287811660408301526001600160601b0387811660608401528682166080840152851660a0830152831660c082015261010060e0820181905260009061301983820185612f91565b9b9a5050505050505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261304d5761304d613028565b500490565b60008261306157613061613028565b500690565b60006020828403121561307857600080fd5b8151801515811461230857600080fd5b634e487b7160e01b600052602160045260246000fd5b60008251612d83818460208701612f61565b6020815260006123086020830184612f9156fe454950373132446f6d61696e2875696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374296f7e40272ccf7bff793b08585f1c68cbcab6f8cb3b0800d269b975c79ffa3745a26469706673582212204ddd9f2ded5e2d6a1dc164fccbcf8e36a596423f56d12ffa4889900ddd7e925364736f6c63430008090033","deployedBytecode":"0x6080604052600436106100ed5760003560e01c80638456cb59116100855780638456cb59146102515780638da5cb5b146102665780639146a775146102915780639e3e493e146102be578063aa0690f8146102de578063e02cab18146102fe578063e37bd0a11461031e578063e3f1b42e1461033e578063f2fde38b1461035e57600080fd5b8063126e704e146100f95780633294a44f1461011b578063361472c3146101305780633bf479ff146101505780633f4ba83a146101b6578063523e99ae146101cb5780635c975abb146101f9578063715018a61461021c578063789771681461023157600080fd5b366100f457005b600080fd5b34801561010557600080fd5b50610119610114366004612777565b61037e565b005b34801561012757600080fd5b5061011961057e565b34801561013c57600080fd5b5061011961014b3660046128e8565b61064b565b34801561015c57600080fd5b5061019161016b3660046129df565b6001602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152015b60405180910390f35b3480156101c257600080fd5b50610119610f77565b3480156101d757600080fd5b506101eb6101e63660046129df565b610f89565b6040519081526020016101ad565b34801561020557600080fd5b5060035460ff1660405190151581526020016101ad565b34801561022857600080fd5b50610119610fb9565b34801561023d57600080fd5b506101eb61024c3660046129df565b611014565b34801561025d57600080fd5b5061011961104b565b34801561027257600080fd5b5060035461010090046001600160a01b03166040516101ad91906129fa565b34801561029d57600080fd5b506102b16102ac3660046129df565b61105b565b6040516101ad9190612a0e565b3480156102ca57600080fd5b506101196102d9366004612a72565b611174565b3480156102ea57600080fd5b506101196102f9366004612abc565b611528565b34801561030a57600080fd5b50610119610319366004612aef565b6116c4565b34801561032a57600080fd5b50610119610339366004612b29565b6118b3565b34801561034a57600080fd5b506101eb610359366004612b5b565b6119ab565b34801561036a57600080fd5b506101196103793660046129df565b611a05565b610386611a7e565b61038f33611ac4565b6001600160a01b038116158015906103b157506001600160a01b038116600114155b80156103c657506001600160a01b0381163014155b6103eb5760405162461bcd60e51b81526004016103e290612ba8565b60405180910390fd5b3360009081526001602081815260408084206001600160a01b03868116865293019091529091205416156104315760405162461bcd60e51b81526004016103e290612bc7565b6001600160a01b0382161580159061045357506001600160a01b038216600114155b61046f5760405162461bcd60e51b81526004016103e290612ba8565b3360009081526001602081815260408084206001600160a01b0388811686529301909152909120548116908316146104b95760405162461bcd60e51b81526004016103e290612be6565b3360008181526001602081815260408084206001600160a01b03888116808752919094018352818520805488861680885284882080549288166001600160a01b0319938416179055958b1687528387208054821690961790955594819052845490931690935582519182528101929092527f21108c84990d72cc717433752110f9dc2c776eabbd861cca48434c44ad42e9a9910160405180910390a16040516001600160a01b0382169033906000805160206130fb83398151915290600090a3505050565b61058733611ac4565b33600090815260016020818152604080842083855290920190529020546001600160a01b03165b6001600160a01b0381166001146105fb573360009081526001602081815260408084206001600160a01b0395861685529092019052902080546001600160a01b03198116909155166105ae565b3360009081526001602052604081208181559061061b60028301826126dd565b505060405133907ffad79252f2a35a653f254aabf7b02e141c2ba535f23ae9e18add88e96d11597290600090a250565b610653611b02565b61065b611a7e565b6001600160a01b038a166000908152600160205260409020546001600160801b03166106995760405162461bcd60e51b81526004016103e290612c05565b8584146106b85760405162461bcd60e51b81526004016103e290612c24565b805182146106d85760405162461bcd60e51b81526004016103e290612c24565b6107218a88888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061071c92508991508a9050612c43565b611b5a565b60005b82811015610788576107768b85858481811061074257610742612d0d565b905060200201602081019061075791906129df565b84848151811061076957610769612d0d565b6020026020010151611c55565b8061078081612d39565b915050610724565b506000826001600160401b038111156107a3576107a36127fe565b6040519080825280602002602001820160405280156107cc578160200160208202803683370190505b50905060005b838110156109095760008585838181106107ee576107ee612d0d565b905060200201602081019061080391906129df565b6001600160a01b03161415610836574782828151811061082557610825612d0d565b6020026020010181815250506108f7565b84848281811061084857610848612d0d565b905060200201602081019061085d91906129df565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161088891906129fa565b60206040518083038186803b1580156108a057600080fd5b505afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190612d54565b8282815181106108ea576108ea612d0d565b6020026020010181815250505b8061090181612d39565b9150506107d2565b5060005b89811015610df25760006109f48c8c8481811061092c5761092c612d0d565b905060200281019061093e9190612d6d565b61094c9060208101906129df565b8d8d8581811061095e5761095e612d0d565b90506020028101906109709190612d6d565b6109819060408101906020016129df565b8e8e8681811061099357610993612d0d565b90506020028101906109a59190612d6d565b6109b6906060810190604001612b29565b6001600160801b03168f8f878181106109d1576109d1612d0d565b90506020028101906109e39190612d6d565b610359906080810190606001612d8d565b90506000805b8a811015610adb57610ab88e8e86818110610a1757610a17612d0d565b9050602002810190610a299190612d6d565b610a37906080810190612da8565b83818110610a4757610a47612d0d565b9050602002810190610a599190612da8565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d8d84818110610aab57610aab612d0d565b9050602002013585611cd4565b15610ac957610ac682612d39565b91505b80610ad381612d39565b9150506109fa565b506001600160a01b038e16600090815260016020526040902054600160801b90046001600160801b03168110801590610b7b57506001600160a01b038e166000908152600160205260409020600201541580610b7b5750610b798e8e8e86818110610b4857610b48612d0d565b9050602002810190610b5a9190612d6d565b610b6b906080810190606001612d8d565b6001600160401b0316611cea565b155b15610ddd5760008d8d85818110610b9457610b94612d0d565b9050602002810190610ba69190612d6d565b610bb79060408101906020016129df565b6001600160a01b03161415610d0f57610c0d8e8e8e86818110610bdc57610bdc612d0d565b9050602002810190610bee9190612d6d565b610bff906080810190606001612d8d565b6001600160401b0316611dae565b6000808e8e86818110610c2257610c22612d0d565b9050602002810190610c349190612d6d565b610c429060208101906129df565b6001600160a01b03168f8f87818110610c5d57610c5d612d0d565b9050602002810190610c6f9190612d6d565b610c80906060810190604001612b29565b6001600160801b031660405160006040518083038185875af1925050503d8060008114610cc9576040519150601f19603f3d011682016040523d82523d6000602084013e610cce565b606091505b509150915081610d085760405162461bcd60e51b8152602060048201526005602482015264435330303760d81b60448201526064016103e2565b5050610ddd565b610d258e8e8e86818110610bdc57610bdc612d0d565b610ddd8d8d85818110610d3a57610d3a612d0d565b9050602002810190610d4c9190612d6d565b610d5a9060208101906129df565b8e8e86818110610d6c57610d6c612d0d565b9050602002810190610d7e9190612d6d565b610d8f906060810190604001612b29565b6001600160801b03168f8f87818110610daa57610daa612d0d565b9050602002810190610dbc9190612d6d565b610dcd9060408101906020016129df565b6001600160a01b03169190611e8f565b50508080610dea90612d39565b91505061090d565b5060005b83811015610f5f576000858583818110610e1257610e12612d0d565b9050602002016020810190610e2791906129df565b6001600160a01b03161415610e7357818181518110610e4857610e48612d0d565b60200260200101514714610e6e5760405162461bcd60e51b81526004016103e290612df1565b610f4d565b818181518110610e8557610e85612d0d565b6020026020010151858583818110610e9f57610e9f612d0d565b9050602002016020810190610eb491906129df565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610edf91906129fa565b60206040518083038186803b158015610ef757600080fd5b505afa158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190612d54565b1115610f4d5760405162461bcd60e51b81526004016103e290612df1565b80610f5781612d39565b915050610df6565b5050610f6b6001600255565b50505050505050505050565b610f7f611ee1565b610f87611f41565b565b6000610f9482611ac4565b506001600160a01b03166000908152600160205260409020546001600160801b031690565b610fc1611ee1565b60405162461bcd60e51b815260206004820152602260248201527f4f776e61626c653a2063616e6e6f742072656e6f756e6365206f776e65727368604482015261069760f41b60648201526084016103e2565b600061101f82611ac4565b506001600160a01b0316600090815260016020526040902054600160801b90046001600160801b031690565b611053611ee1565b610f87611f8d565b606061106682611ac4565b6001600160a01b0382166000908152600160205260408120546001600160801b03166001600160401b0381111561109f5761109f6127fe565b6040519080825280602002602001820160405280156110c8578160200160208202803683370190505b506001600160a01b038085166000908152600160208181526040808420838552909201905281205492935091165b6001600160a01b03811660011461116b5780838360ff168151811061111d5761111d612d0d565b6001600160a01b03928316602091820292909201810191909152868216600090815260018083526040808320958516835294019091529190912054168161116381612e10565b9250506110f6565b50909392505050565b61117c611a7e565b336000818152600160205260409020546001600160801b0316156111e25760405162461bcd60e51b815260206004820181905260248201527f4f7267616e697a65723a204f726720616c7265616479206f6e626f617264656460448201526064016103e2565b826111ff5760405162461bcd60e51b81526004016103e290612e30565b6001600160801b0382168310156112285760405162461bcd60e51b81526004016103e290612e30565b6001600160801b03821661124e5760405162461bcd60e51b81526004016103e290612c24565b6001600160a01b0381166000908152600160208181526040928390206001600160801b038616600160801b0290558251600580825260c08201909452919290820160a0803683375050506001600160a01b038316600090815260016020908152604090912082516112c99360029092019291909101906126fb565b5060005b8481101561148c5760008686838181106112e9576112e9612d0d565b90506020020160208101906112fe91906129df565b90506001600160a01b0381161580159061132257506001600160a01b038116600114155b801561133757506001600160a01b0381163014155b80156113555750806001600160a01b0316836001600160a01b031614155b6113895760405162461bcd60e51b8152602060048201526005602482015264435330303160d81b60448201526064016103e2565b6001600160a01b0384811660009081526001602081815260408084208686168552909201905290205416156113d05760405162461bcd60e51b81526004016103e290612bc7565b6001600160a01b038481166000818152600160208181526040808420988616845297909101905285812080546001600160a01b03191693851693841790559451929485936000805160206130fb8339815191529190a36001600160a01b038416600090815260016020526040812080546001600160801b03169161145383612e4f565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050808061148490612d39565b9150506112cd565b506001600160a01b038083166000908152600160208181526040808420948616845293820190529082902080546001600160a01b0319169091179055516114d69086908690612e76565b6040518091039020826001600160a01b03167fcc78a51061ab3534a9c926383d2e9693d6e839e84b27cdcbfbe9784c2beb4a948787604051611519929190612eb6565b60405180910390a35050505050565b611530611a7e565b61153933611ac4565b6001600160a01b0382161580159061155b57506001600160a01b038216600114155b801561157057506001600160a01b0382163014155b61158c5760405162461bcd60e51b81526004016103e290612ba8565b3360009081526001602081815260408084206001600160a01b03878116865293019091529091205416156115d25760405162461bcd60e51b81526004016103e290612bc7565b336000818152600160208181526040808420838552808401835281852080546001600160a01b038a81168089529488208054919092166001600160a01b0319918216179091558154169092179091559383525281546001600160801b0316919061163b83612e4f565b91906101000a8154816001600160801b0302191690836001600160801b0316021790555050816001600160a01b0316336001600160a01b03166000805160206130fb83398151915260405160405180910390a3336000908152600160205260409020546001600160801b03828116600160801b90920416146116c0576116c0816118b3565b5050565b6116cc611a7e565b6116d533611ac4565b336000908152600160208190526040909120546001600160801b038084169261170092909116612ef7565b6001600160801b031610156117275760405162461bcd60e51b81526004016103e290612f1f565b6001600160a01b0382161580159061174957506001600160a01b038216600114155b6117655760405162461bcd60e51b81526004016103e290612ba8565b3360009081526001602081815260408084206001600160a01b0388811686529301909152909120548116908316146117af5760405162461bcd60e51b81526004016103e290612be6565b3360008181526001602081815260408084206001600160a01b038881168652818501845282862080548b831688529387208054949092166001600160a01b03199485161790915580549092169091559383525281546001600160801b0316919061181883612f3e565b82546001600160801b039182166101009390930a928302919092021990911617905550604080516001600160a01b03841681523360208201527f21108c84990d72cc717433752110f9dc2c776eabbd861cca48434c44ad42e9a9910160405180910390a1336000908152600160205260409020546001600160801b03828116600160801b90920416146118ae576118ae816118b3565b505050565b6118bb611a7e565b6118c433611ac4565b336000908152600160205260409020546001600160801b0390811690821611156119005760405162461bcd60e51b81526004016103e290612f1f565b6001816001600160801b031610156119425760405162461bcd60e51b8152602060048201526005602482015264435330313560d81b60448201526064016103e2565b3360008181526001602090815260409182902080546001600160801b03908116600160801b918716918202179091558251908152908101929092527fd6c6a426185f23acffb7dba7a1fb29112e6b695b6f79c7278cf7920af8028b2d910160405180910390a150565b604080516001600160a01b038087166020830152851691810191909152606081018390526001600160401b038216608082015260009060a0016040516020818303038152906040528051906020012090505b949350505050565b611a0d611ee1565b6001600160a01b038116611a725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e2565b611a7b81611fca565b50565b60035460ff1615610f875760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103e2565b6001600160a01b0381166000908152600160205260409020546001600160801b0316611a7b5760405162461bcd60e51b81526004016103e290612c05565b600280541415611b545760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103e2565b60028055565b6000805b8351811015611c4e576000611ba5858381518110611b7e57611b7e612d0d565b6020026020010151858481518110611b9857611b98612d0d565b6020026020010151612024565b90506001600160a01b038116600114801590611be957506001600160a01b038681166000908152600160208181526040808420868616855290920190529020541615155b8015611c065750826001600160a01b0316816001600160a01b0316115b611c3a5760405162461bcd60e51b815260206004820152600560248201526410d4cc0c4d60da1b60448201526064016103e2565b915080611c4681612d39565b915050611b5e565b5050505050565b6000805460408051602081018252838152905163228ab20d60e11b81526001600160a01b0390921692634515641a92611c9d9288928892309289929182918591600401612fbd565b600060405180830381600087803b158015611cb757600080fd5b505af1158015611ccb573d6000803e3d6000fd5b50505050505050565b600082611ce185846120fd565b14949350505050565b600080611cf96101008461303e565b90506000611d0961010085613052565b6001600160a01b0386166000908152600160205260409020600201549091501580611d4f57506001600160a01b0385166000908152600160205260409020600201548210155b15611d5f57600092505050611da8565b6001600160a01b0385166000908152600160208190526040909120600201805491831b9184908110611d9357611d93612d0d565b90600052602060002001541660001415925050505b92915050565b6000611dbc6101008361303e565b90506000611dcc61010084613052565b6001600160a01b0385166000908152600160205260409020600201549091508210611e43575b6001600160a01b0384166000908152600160205260409020600201548214611e43576001600160a01b0384166000908152600160208181526040832060020180549283018155835282200155611df2565b6001600160a01b0384166000908152600160208190526040909120600201805491831b9184908110611e7757611e77612d0d565b60009182526020909120018054909117905550505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526118ae90849061214a565b6003546001600160a01b03610100909104163314610f875760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e2565b611f4961221c565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051611f8391906129fa565b60405180910390a1565b611f95611a7e565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f763390565b600380546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008061202f612265565b604080518082018252601b81527f506179726f6c6c5478286279746573333220726f6f7448617368290000000000602091820152905161209c917f8fba187ae9ab8a9763f7172f9bfd506ee0dfef805deabfbabbb76e3a3c44804d91889101918252602082015260400190565b604051602081830303815290604052805190602001206040516020016120d992919061190160f01b81526002810192909252602282015260420190565b60408051601f19818403018152919052805160209091012090506119fd81846122c1565b600081815b84518110156121425761212e8286838151811061212157612121612d0d565b60200260200101516122dd565b91508061213a81612d39565b915050612102565b509392505050565b600061219f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661230f9092919063ffffffff16565b8051909150156118ae57808060200190518101906121bd9190613066565b6118ae5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e2565b60035460ff16610f875760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103e2565b60006040518060600160405280603781526020016130c4603791398051906020012061228e4690565b60408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b60008060006122d0858561231e565b9150915061214281612364565b60008183106122f9576000828152602084905260409020612308565b60008381526020839052604090205b9392505050565b60606119fd84846000856124ad565b6000808251604114156123555760208301516040840151606085015160001a61234987828585612588565b9450945050505061235d565b506000905060025b9250929050565b600081600481111561237857612378613088565b14156123815750565b600181600481111561239557612395613088565b14156123de5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016103e2565b60028160048111156123f2576123f2613088565b14156124405760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103e2565b600381600481111561245457612454613088565b1415611a7b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103e2565b60608247101561250e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103e2565b600080866001600160a01b0316858760405161252a919061309e565b60006040518083038185875af1925050503d8060008114612567576040519150601f19603f3d011682016040523d82523d6000602084013e61256c565b606091505b509150915061257d87838387612642565b979650505050505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156125b55750600090506003612639565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612609573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661263257600060019250925050612639565b9150600090505b94509492505050565b606083156126ae5782516126a7576001600160a01b0385163b6126a75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e2565b50816119fd565b6119fd83838151156126c35781518083602001fd5b8060405162461bcd60e51b81526004016103e291906130b0565b5080546000825590600052602060002090810190611a7b9190612746565b828054828255906000526020600020908101928215612736579160200282015b8281111561273657825182559160200191906001019061271b565b50612742929150612746565b5090565b5b808211156127425760008155600101612747565b80356001600160a01b038116811461277257600080fd5b919050565b60008060006060848603121561278c57600080fd5b6127958461275b565b92506127a36020850161275b565b91506127b16040850161275b565b90509250925092565b60008083601f8401126127cc57600080fd5b5081356001600160401b038111156127e357600080fd5b6020830191508360208260051b850101111561235d57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561283c5761283c6127fe565b604052919050565b60006001600160401b0382111561285d5761285d6127fe565b5060051b60200190565b600082601f83011261287857600080fd5b8135602061288d61288883612844565b612814565b82815260059290921b840181019181810190868411156128ac57600080fd5b8286015b848110156128dd5780356001600160601b03811681146128d05760008081fd5b83529183019183016128b0565b509695505050505050565b60008060008060008060008060008060c08b8d03121561290757600080fd5b6129108b61275b565b995060208b01356001600160401b038082111561292c57600080fd5b6129388e838f016127ba565b909b50995060408d013591508082111561295157600080fd5b61295d8e838f016127ba565b909950975060608d013591508082111561297657600080fd5b6129828e838f016127ba565b909750955060808d013591508082111561299b57600080fd5b6129a78e838f016127ba565b909550935060a08d01359150808211156129c057600080fd5b506129cd8d828e01612867565b9150509295989b9194979a5092959850565b6000602082840312156129f157600080fd5b6123088261275b565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015612a4f5783516001600160a01b031683529284019291840191600101612a2a565b50909695505050505050565b80356001600160801b038116811461277257600080fd5b600080600060408486031215612a8757600080fd5b83356001600160401b03811115612a9d57600080fd5b612aa9868287016127ba565b90945092506127b1905060208501612a5b565b60008060408385031215612acf57600080fd5b612ad88361275b565b9150612ae660208401612a5b565b90509250929050565b600080600060608486031215612b0457600080fd5b612b0d8461275b565b9250612b1b6020850161275b565b91506127b160408501612a5b565b600060208284031215612b3b57600080fd5b61230882612a5b565b80356001600160401b038116811461277257600080fd5b60008060008060808587031215612b7157600080fd5b612b7a8561275b565b9350612b886020860161275b565b925060408501359150612b9d60608601612b44565b905092959194509250565b602080825260059082015264435330303360d81b604082015260600190565b60208082526005908201526421a998181960d91b604082015260600190565b602080825260059082015264435330313760d81b604082015260600190565b602080825260059082015264435330303960d81b604082015260600190565b60208082526005908201526410d4cc0c0d60da1b604082015260600190565b6000612c5161288884612844565b80848252602080830192508560051b850136811115612c6f57600080fd5b855b81811015612d015780356001600160401b0380821115612c915760008081fd5b90880190601f3681840112612ca65760008081fd5b823582811115612cb857612cb86127fe565b612cc9818301601f19168801612814565b92508083523687828601011115612ce257600091508182fd5b8087850188850137600090830187015250865250938201938201612c71565b50919695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d4d57612d4d612d23565b5060010190565b600060208284031215612d6657600080fd5b5051919050565b60008235609e19833603018112612d8357600080fd5b9190910192915050565b600060208284031215612d9f57600080fd5b61230882612b44565b6000808335601e19843603018112612dbf57600080fd5b8301803591506001600160401b03821115612dd957600080fd5b6020019150600581901b360382131561235d57600080fd5b602080825260059082015264086a66062760db1b604082015260600190565b600060ff821660ff811415612e2757612e27612d23565b60010192915050565b602080825260059082015264043533030360dc1b604082015260600190565b60006001600160801b0382811680821415612e6c57612e6c612d23565b6001019392505050565b60008184825b85811015612eab576001600160a01b03612e958361275b565b1683526020928301929190910190600101612e7c565b509095945050505050565b60208082528181018390526000908460408401835b868110156128dd576001600160a01b03612ee48461275b565b1682529183019190830190600101612ecb565b60006001600160801b0383811690831681811015612f1757612f17612d23565b039392505050565b60208082526005908201526421a998189b60d91b604082015260600190565b60006001600160801b03821680612f5757612f57612d23565b6000190192915050565b60005b83811015612f7c578181015183820152602001612f64565b83811115612f8b576000848401525b50505050565b60008151808452612fa9816020860160208601612f61565b601f01601f19169290920160200192915050565b6001600160a01b038981168252888116602083015287811660408301526001600160601b0387811660608401528682166080840152851660a0830152831660c082015261010060e0820181905260009061301983820185612f91565b9b9a5050505050505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261304d5761304d613028565b500490565b60008261306157613061613028565b500690565b60006020828403121561307857600080fd5b8151801515811461230857600080fd5b634e487b7160e01b600052602160045260246000fd5b60008251612d83818460208701612f61565b6020815260006123086020830184612f9156fe454950373132446f6d61696e2875696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374296f7e40272ccf7bff793b08585f1c68cbcab6f8cb3b0800d269b975c79ffa3745a26469706673582212204ddd9f2ded5e2d6a1dc164fccbcf8e36a596423f56d12ffa4889900ddd7e925364736f6c63430008090033","abi":[{"inputs":[{"internalType":"address","name":"_allowanceAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"safeAddress","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"ApproverAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"safeAddress","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"}],"name":"ApproverRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint128","name":"threshold","type":"uint128"},{"indexed":false,"internalType":"address","name":"safeAddress","type":"address"}],"name":"ChangedThreshold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"orgAddress","type":"address"}],"name":"OrgOffboarded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"orgAddress","type":"address"},{"indexed":true,"internalType":"address[]","name":"approvers","type":"address[]"},{"indexed":false,"internalType":"address[]","name":"approvers2","type":"address[]"}],"name":"OrgOnboarded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"approver","type":"address"},{"indexed":false,"internalType":"address","name":"safeAddress","type":"address"}],"name":"RemovedApprover","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"address","name":"approver","type":"address"},{"internalType":"uint128","name":"threshold","type":"uint128"}],"name":"addApproverWithThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint128","name":"threshold","type":"uint128"}],"name":"changeThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint64","name":"payoutNonce","type":"uint64"}],"name":"encodeTransactionData","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"safeAddress","type":"address"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"uint64","name":"payoutNonce","type":"uint64"},{"internalType":"bytes32[][]","name":"proof","type":"bytes32[][]"}],"internalType":"struct Storage.Payout[]","name":"payouts","type":"tuple[]"},{"internalType":"bytes32[]","name":"roots","type":"bytes32[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"},{"internalType":"address[]","name":"paymentTokens","type":"address[]"},{"internalType":"uint96[]","name":"payoutAmounts","type":"uint96[]"}],"name":"executePayroll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_safeAddress","type":"address"}],"name":"getApproverCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_safeAddress","type":"address"}],"name":"getApprovers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_safeAddress","type":"address"}],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"offboard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_approvers","type":"address[]"},{"internalType":"uint128","name":"approvalsRequired","type":"uint128"}],"name":"onboard","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"orgs","outputs":[{"internalType":"uint128","name":"approverCount","type":"uint128"},{"internalType":"uint128","name":"approvalsRequired","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevApprover","type":"address"},{"internalType":"address","name":"approver","type":"address"},{"internalType":"uint128","name":"threshold","type":"uint128"}],"name":"removeApprover","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevApprover","type":"address"},{"internalType":"address","name":"oldApprover","type":"address"},{"internalType":"address","name":"newApprover","type":"address"}],"name":"swapApprover","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}